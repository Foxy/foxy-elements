{
  "version": "experimental",
  "tags": [
    {
      "name": "foxy-access-recovery-form",
      "path": "./src/elements/public/AccessRecoveryForm/index.ts",
      "description": "Email-based \"forgot password\" form.",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "email:before"
        },
        {
          "name": "email:after"
        },
        {
          "name": "message:before"
        },
        {
          "name": "message:after"
        },
        {
          "name": "submit:before"
        },
        {
          "name": "submit:after"
        }
      ]
    },
    {
      "name": "foxy-address-card",
      "path": "./src/elements/public/AddressCard/index.ts",
      "description": "Card element displaying a customer address.",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "address-name:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "address-name:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "full-name:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "full-name:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "full-address:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "full-address:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "company:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "company:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "phone:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "phone:after",
          "description": "**new in v1.4.0**"
        }
      ]
    },
    {
      "name": "foxy-address-form",
      "path": "./src/elements/public/AddressForm/index.ts",
      "description": "Basic form displaying customer address.",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "address-name:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "address-name:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "first-name:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "first-name:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "last-name:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "last-name:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "region:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "region:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "city:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "city:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "phone:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "phone:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "company:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "company:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "address-one:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "address-one:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "address-two:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "address-two:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "country:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "country:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "postal-code:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "postal-code:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "timestamps:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "timestamps:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "create:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "create:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "delete:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "delete:after",
          "description": "**new in v1.4.0**"
        }
      ]
    },
    {
      "name": "foxy-admin-subscription-card",
      "path": "./src/elements/public/AdminSubscriptionCard/index.ts",
      "description": "Card element representing a subscription (`fx:subscription`).\nAdmin-only.",
      "attributes": [
        {
          "name": "locale-codes",
          "description": "URL of the `fx:locale_codes` property helper.\nThis will be used to determine the currency code for subscriptions that link to a\ntransaction template without the code."
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "localeCodes",
          "attribute": "locale-codes",
          "description": "URL of the `fx:locale_codes` property helper.\nThis will be used to determine the currency code for subscriptions that link to a\ntransaction template without the code."
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-api-browser",
      "path": "./src/elements/public/ApiBrowser/index.ts",
      "description": "Interactive hAPI explorer.",
      "attributes": [
        {
          "name": "home",
          "description": "Bookmark URL of your API.",
          "type": "string"
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "home",
          "attribute": "home",
          "description": "Bookmark URL of your API.",
          "type": "string"
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-applied-coupon-code-card",
      "path": "./src/elements/public/AppliedCouponCodeCard/index.ts",
      "description": "Card element displaying an applied coupon code.",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "type": "Templates<TData>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-applied-coupon-code-form",
      "path": "./src/elements/public/AppliedCouponCodeForm/index.ts",
      "description": "Form element for managing applied coupon codes (`fx:applied_coupon_code`).",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "code:before"
        },
        {
          "name": "code:after"
        },
        {
          "name": "ignore-usage-limits:before"
        },
        {
          "name": "ignore-usage-limits:after"
        },
        {
          "name": "create:before"
        },
        {
          "name": "create:after"
        },
        {
          "name": "delete:before"
        },
        {
          "name": "delete:after"
        }
      ]
    },
    {
      "name": "foxy-applied-tax-card",
      "path": "./src/elements/public/AppliedTaxCard/index.ts",
      "description": "Basic card displaying an applied tax.",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "type": "Templates<TData>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "title:before"
        },
        {
          "name": "title:after"
        },
        {
          "name": "subtitle:before"
        },
        {
          "name": "subtitle:after"
        }
      ]
    },
    {
      "name": "foxy-attribute-card",
      "path": "./src/elements/public/AttributeCard/index.ts",
      "description": "Basic card displaying an attribute.",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "name:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "name:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "value:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "value:after",
          "description": "**new in v1.4.0**"
        }
      ]
    },
    {
      "name": "foxy-attribute-form",
      "path": "./src/elements/public/AttributeForm/index.ts",
      "description": "Form element for creating or editing attributes.",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "name:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "name:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "value:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "value:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "visibility:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "visibility:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "timestamps:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "timestamps:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "create:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "create:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "delete:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "delete:after",
          "description": "**new in v1.4.0**"
        }
      ]
    },
    {
      "name": "foxy-cancellation-form",
      "path": "./src/elements/public/CancellationForm/index.ts",
      "description": "Form element for canceling subscriptions.",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "warning:before"
        },
        {
          "name": "warning:after"
        },
        {
          "name": "end-date:before"
        },
        {
          "name": "end-date:after"
        },
        {
          "name": "submit:before"
        },
        {
          "name": "submit:after"
        }
      ]
    },
    {
      "name": "foxy-cart-card",
      "path": "./src/elements/public/CartCard/index.ts",
      "description": "Card element representing cart resource (`fx:cart`).",
      "attributes": [
        {
          "name": "locale-codes",
          "description": "URL of the `fx:locale_codes` property helper.\nThis will be used to determine the currency code for carts created with hAPI\nsince it isn't included in them.",
          "type": "string"
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "localeCodes",
          "attribute": "locale-codes",
          "description": "URL of the `fx:locale_codes` property helper.\nThis will be used to determine the currency code for carts created with hAPI\nsince it isn't included in them.",
          "type": "string"
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-cart-form",
      "path": "./src/elements/public/CartForm/index.ts",
      "description": "Form element for creating or editing carts (`fx:cart`).",
      "attributes": [
        {
          "name": "item-categories",
          "description": "URL of the `fx:item_categories` collection for the store."
        },
        {
          "name": "template-sets",
          "description": "URL of the `fx:template_sets` collection for the store."
        },
        {
          "name": "locale-codes",
          "description": "URL of the `fx:locale_codes` property helper."
        },
        {
          "name": "customers",
          "description": "URL of the `fx:customers` collection for the store."
        },
        {
          "name": "countries",
          "description": "URL of the `fx:countries` property helper."
        },
        {
          "name": "regions",
          "description": "URL of the `fx:regions` property helper."
        },
        {
          "name": "coupons",
          "description": "URL of the `fx:coupons` collection for the store."
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "itemCategories",
          "attribute": "item-categories",
          "description": "URL of the `fx:item_categories` collection for the store."
        },
        {
          "name": "templateSets",
          "attribute": "template-sets",
          "description": "URL of the `fx:template_sets` collection for the store."
        },
        {
          "name": "localeCodes",
          "attribute": "locale-codes",
          "description": "URL of the `fx:locale_codes` property helper."
        },
        {
          "name": "customers",
          "attribute": "customers",
          "description": "URL of the `fx:customers` collection for the store."
        },
        {
          "name": "countries",
          "attribute": "countries",
          "description": "URL of the `fx:countries` property helper."
        },
        {
          "name": "regions",
          "attribute": "regions",
          "description": "URL of the `fx:regions` property helper."
        },
        {
          "name": "coupons",
          "attribute": "coupons",
          "description": "URL of the `fx:coupons` collection for the store."
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "description": "Template render functions mapped to their name.",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "customer-type:before"
        },
        {
          "name": "customer-type:after"
        },
        {
          "name": "customer:before"
        },
        {
          "name": "customer:after"
        },
        {
          "name": "template-set-uri:before"
        },
        {
          "name": "template-set-uri:after"
        },
        {
          "name": "items:before"
        },
        {
          "name": "items:after"
        },
        {
          "name": "applied-coupon-codes:before"
        },
        {
          "name": "applied-coupon-codes:after"
        },
        {
          "name": "custom-fields:before"
        },
        {
          "name": "custom-fields:after"
        },
        {
          "name": "attributes:before"
        },
        {
          "name": "attributes:after"
        },
        {
          "name": "billing-first-name:before"
        },
        {
          "name": "billing-first-name:after"
        },
        {
          "name": "billing-last-name:before"
        },
        {
          "name": "billing-last-name:after"
        },
        {
          "name": "billing-company:before"
        },
        {
          "name": "billing-company:after"
        },
        {
          "name": "billing-phone:before"
        },
        {
          "name": "billing-phone:after"
        },
        {
          "name": "billing-address-one:before"
        },
        {
          "name": "billing-address-one:after"
        },
        {
          "name": "billing-address-two:before"
        },
        {
          "name": "billing-address-two:after"
        },
        {
          "name": "billing-country:before"
        },
        {
          "name": "billing-country:after"
        },
        {
          "name": "billing-region:before"
        },
        {
          "name": "billing-region:after"
        },
        {
          "name": "billing-city:before"
        },
        {
          "name": "billing-city:after"
        },
        {
          "name": "billing-postal-code:before"
        },
        {
          "name": "billing-postal-code:after"
        },
        {
          "name": "shipping-first-name:before"
        },
        {
          "name": "shipping-first-name:after"
        },
        {
          "name": "shipping-last-name:before"
        },
        {
          "name": "shipping-last-name:after"
        },
        {
          "name": "shipping-company:before"
        },
        {
          "name": "shipping-company:after"
        },
        {
          "name": "shipping-phone:before"
        },
        {
          "name": "shipping-phone:after"
        },
        {
          "name": "shipping-address-one:before"
        },
        {
          "name": "shipping-address-one:after"
        },
        {
          "name": "shipping-address-two:before"
        },
        {
          "name": "shipping-address-two:after"
        },
        {
          "name": "shipping-country:before"
        },
        {
          "name": "shipping-country:after"
        },
        {
          "name": "shipping-region:before"
        },
        {
          "name": "shipping-region:after"
        },
        {
          "name": "shipping-city:before"
        },
        {
          "name": "shipping-city:after"
        },
        {
          "name": "shipping-postal-code:before"
        },
        {
          "name": "shipping-postal-code:after"
        },
        {
          "name": "view-as-customer:before"
        },
        {
          "name": "view-as-customer:after"
        },
        {
          "name": "delete:before"
        },
        {
          "name": "delete:after"
        },
        {
          "name": "create:before"
        },
        {
          "name": "create:after"
        }
      ]
    },
    {
      "name": "foxy-client-card",
      "path": "./src/elements/public/ClientCard/index.ts",
      "description": "Card element representing a `fx:client` resource.",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-client-form",
      "path": "./src/elements/public/ClientForm/index.ts",
      "description": "Form element for viewing and deleting clients (`fx:client`).",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "client-id:before"
        },
        {
          "name": "client-id:after"
        },
        {
          "name": "client-secret:before"
        },
        {
          "name": "client-secret:after"
        },
        {
          "name": "redirect-uri:before"
        },
        {
          "name": "redirect-uri:after"
        },
        {
          "name": "project-name:before"
        },
        {
          "name": "project-name:after"
        },
        {
          "name": "project-description:before"
        },
        {
          "name": "project-description:after"
        },
        {
          "name": "company-name:before"
        },
        {
          "name": "company-name:after"
        },
        {
          "name": "company-url:before"
        },
        {
          "name": "company-url:after"
        },
        {
          "name": "company-logo:before"
        },
        {
          "name": "company-logo:after"
        },
        {
          "name": "contact-name:before"
        },
        {
          "name": "contact-name:after"
        },
        {
          "name": "contact-email:before"
        },
        {
          "name": "contact-email:after"
        },
        {
          "name": "contact-phone:before"
        },
        {
          "name": "contact-phone:after"
        },
        {
          "name": "timestamps:before"
        },
        {
          "name": "timestamps:after"
        },
        {
          "name": "create:before"
        },
        {
          "name": "create:after"
        },
        {
          "name": "delete:before"
        },
        {
          "name": "delete:after"
        }
      ]
    },
    {
      "name": "foxy-collection-page",
      "path": "./src/elements/public/CollectionPage/index.ts",
      "description": "Renders an element for each resource in a collection page.",
      "attributes": [
        {
          "name": "props",
          "description": "Spread directive argument from `@open-wc/lit-helpers` (properties, event listeners and attributes you'd like to pass to the item element).",
          "type": "object",
          "default": "{}"
        },
        {
          "name": "item",
          "description": "Custom element tag or a render function to use for displaying collection items.\nGenerated custom elements will have the following attributes:\n\n- `parent` – same as `foxy-collection-page[href]`;\n- `group` - same as `foxy-collection-page[group]`;\n- `href` – collection page item's `_links.self.href` value;\n- `lang` – same as `foxy-collection-page[lang]`;\n\nRender function will receive `ItemRendererContext` in the first argument.",
          "type": "string",
          "default": "\"foxy-null\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "props",
          "attribute": "props",
          "description": "Spread directive argument from `@open-wc/lit-helpers` (properties, event listeners and attributes you'd like to pass to the item element).",
          "type": "object",
          "default": "{}"
        },
        {
          "name": "item",
          "attribute": "item",
          "description": "Custom element tag or a render function to use for displaying collection items.\nGenerated custom elements will have the following attributes:\n\n- `parent` – same as `foxy-collection-page[href]`;\n- `group` - same as `foxy-collection-page[group]`;\n- `href` – collection page item's `_links.self.href` value;\n- `lang` – same as `foxy-collection-page[lang]`;\n\nRender function will receive `ItemRendererContext` in the first argument.",
          "type": "string",
          "default": "\"foxy-null\""
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-collection-pages",
      "path": "./src/elements/public/CollectionPages/index.ts",
      "description": "Renders an element for each page in a collection.",
      "attributes": [
        {
          "name": "props",
          "description": "Spread directive argument from `@open-wc/lit-helpers` (properties, event listeners and attributes you'd like to pass to the page element).",
          "type": "object",
          "default": "{}"
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "first",
          "description": "URL of the first page in a collection.",
          "type": "string"
        },
        {
          "name": "pages",
          "description": "Array of all currently loaded pages in a collection.",
          "type": "array"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "manual",
          "description": "If false, will load pages on scroll. If true, will display a button triggering the process.",
          "type": "boolean"
        },
        {
          "name": "page",
          "description": "Custom element tag or a render function to use for displaying collection pages.\nGenerated custom elements will have the following attributes:\n\n- `group` – same as `foxy-collection-pages[group]`;\n- `href` – collection page's `_links.self.href` value;\n- `lang` – same as `foxy-collection-pages[lang]`;\n- `item` – will contain `item-tag` when provided with a string value formatted as `page-tag item-tag`.\n\nRender function will receive `PageRenderer<TPage>` in the first argument.\nUses `foxy-collection-page` by default.",
          "type": "string",
          "default": "\"foxy-collection-page foxy-null\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "props",
          "attribute": "props",
          "description": "Spread directive argument from `@open-wc/lit-helpers` (properties, event listeners and attributes you'd like to pass to the page element).",
          "type": "object",
          "default": "{}"
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "first",
          "attribute": "first",
          "description": "URL of the first page in a collection.",
          "type": "string"
        },
        {
          "name": "pages",
          "attribute": "pages",
          "description": "Array of all currently loaded pages in a collection.",
          "type": "array"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "manual",
          "attribute": "manual",
          "description": "If false, will load pages on scroll. If true, will display a button triggering the process.",
          "type": "boolean"
        },
        {
          "name": "page",
          "attribute": "page",
          "description": "Custom element tag or a render function to use for displaying collection pages.\nGenerated custom elements will have the following attributes:\n\n- `group` – same as `foxy-collection-pages[group]`;\n- `href` – collection page's `_links.self.href` value;\n- `lang` – same as `foxy-collection-pages[lang]`;\n- `item` – will contain `item-tag` when provided with a string value formatted as `page-tag item-tag`.\n\nRender function will receive `PageRenderer<TPage>` in the first argument.\nUses `foxy-collection-page` by default.",
          "type": "string",
          "default": "\"foxy-collection-page foxy-null\""
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-copy-to-clipboard",
      "path": "./src/elements/public/CopyToClipboard/index.ts",
      "description": "A simple \"click to copy\" button that takes the size of the font\nyour text is written in (considering that the font styles are applied to container).",
      "attributes": [
        {
          "name": "text",
          "description": "Text to copy.",
          "type": "string"
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "text",
          "attribute": "text",
          "description": "Text to copy.",
          "type": "string"
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "lang",
          "attribute": "lang",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ]
    },
    {
      "name": "foxy-coupon-card",
      "path": "./src/elements/public/CouponCard/index.ts",
      "description": "Basic card displaying a coupon.",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "templates",
          "type": "Partial<{ 'total:before': Renderer<CouponCard>; 'total:after': Renderer<CouponCard>; 'status:before': Renderer<CouponCard>; ... 4 more ...; 'customer:after': Renderer<...>; }>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "title:before"
        },
        {
          "name": "title:after"
        },
        {
          "name": "description:before"
        },
        {
          "name": "description:after"
        },
        {
          "name": "status:before"
        },
        {
          "name": "status:after"
        }
      ]
    },
    {
      "name": "foxy-coupon-code-form",
      "path": "./src/elements/public/CouponCodeForm/index.ts",
      "description": "Form element for creating or editing coupon codes (`fx:coupon_code`).",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "code:before"
        },
        {
          "name": "code:after"
        },
        {
          "name": "timestamps:before"
        },
        {
          "name": "timestamps:after"
        },
        {
          "name": "delete:before"
        },
        {
          "name": "delete:after"
        },
        {
          "name": "create:before"
        },
        {
          "name": "create:after"
        }
      ]
    },
    {
      "name": "foxy-coupon-codes-form",
      "path": "./src/elements/public/CouponCodesForm/index.ts",
      "description": "Form element for importing coupon codes (`fx:coupon_codes`).",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "codes:before"
        },
        {
          "name": "codes:after"
        },
        {
          "name": "import:before"
        },
        {
          "name": "import:after"
        }
      ]
    },
    {
      "name": "foxy-internal-coupon-codes-form-list-item",
      "path": "./src/elements/public/CouponCodesForm/index.ts",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-coupon-detail-card",
      "path": "./src/elements/public/CouponDetailCard/index.ts",
      "description": "Basic card displaying a coupon detail.",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "type": "Templates<TData>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "title:before"
        },
        {
          "name": "title:after"
        },
        {
          "name": "subtitle:before"
        },
        {
          "name": "subtitle:after"
        }
      ]
    },
    {
      "name": "foxy-coupon-form",
      "path": "./src/elements/public/CouponForm/index.ts",
      "description": "Form element for creating or editing coupons (`fx:coupon`).",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "name:before"
        },
        {
          "name": "name:after"
        },
        {
          "name": "rules:before"
        },
        {
          "name": "rules:after"
        },
        {
          "name": "codes:before"
        },
        {
          "name": "codes:after"
        },
        {
          "name": "usage:before"
        },
        {
          "name": "usage:after"
        },
        {
          "name": "product-restrictions:before"
        },
        {
          "name": "product-restrictions:after"
        },
        {
          "name": "category-restrictions:before"
        },
        {
          "name": "category-restrictions:after"
        },
        {
          "name": "options:before"
        },
        {
          "name": "options:after"
        },
        {
          "name": "timestamps:before"
        },
        {
          "name": "timestamps:after"
        },
        {
          "name": "delete:before"
        },
        {
          "name": "delete:after"
        },
        {
          "name": "create:before"
        },
        {
          "name": "create:after"
        }
      ]
    },
    {
      "name": "foxy-custom-field-card",
      "path": "./src/elements/public/CustomFieldCard/index.ts",
      "description": "Basic card displaying a custom field.",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "type": "Templates<TData>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "title:before"
        },
        {
          "name": "title:after"
        },
        {
          "name": "subtitle:before"
        },
        {
          "name": "subtitle:after"
        }
      ]
    },
    {
      "name": "foxy-custom-field-form",
      "path": "./src/elements/public/CustomFieldForm/index.ts",
      "description": "Form element for creating or editing custom fields.",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "name:before"
        },
        {
          "name": "name:after"
        },
        {
          "name": "value:before"
        },
        {
          "name": "value:after"
        },
        {
          "name": "visibility:before"
        },
        {
          "name": "visibility:after"
        },
        {
          "name": "timestamps:before"
        },
        {
          "name": "timestamps:after"
        },
        {
          "name": "create:before"
        },
        {
          "name": "create:after"
        },
        {
          "name": "delete:before"
        },
        {
          "name": "delete:after"
        }
      ]
    },
    {
      "name": "foxy-customer",
      "path": "./src/elements/public/Customer/index.ts",
      "description": "All-in-one element for customer management.",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "header:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "header:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "header:actions:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "header:actions:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "header:actions:edit:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "header:actions:edit:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "addresses:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "addresses:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "addresses:actions:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "addresses:actions:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "addresses:actions:create:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "addresses:actions:create:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "addresses:list:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "addresses:list:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "payment-methods:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "payment-methods:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "payment-methods:list:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "payment-methods:list:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "attributes:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "attributes:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "attributes:actions:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "attributes:actions:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "attributes:actions:create:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "attributes:actions:create:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "attributes:list:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "attributes:list:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "transactions:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "transactions:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "subscriptions:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "subscriptions:after",
          "description": "**new in v1.4.0**"
        }
      ]
    },
    {
      "name": "foxy-customer-api",
      "path": "./src/elements/public/CustomerApi/index.ts",
      "description": "Element connector for Customer API.",
      "attributes": [
        {
          "name": "base",
          "description": "Bookmark URL for this API. This is where the tree traversal begins. We also use this URL as a base for relative paths.",
          "type": "string"
        },
        {
          "name": "level",
          "description": "Numeric Consola log level. If omitted, Consola defaults will be used.",
          "type": "number"
        },
        {
          "name": "storage",
          "description": "Credentials storage implementing Web Storage API. Access tokens and other related info will be stored here. Defaults to in-memory storage.",
          "type": "string"
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "SignOutEvent",
          "type": "typeof (Anonymous class)",
          "default": "\"class extends CustomEvent<void> {}\""
        },
        {
          "name": "SignInEvent",
          "type": "typeof (Anonymous class)",
          "default": "\"class extends CustomEvent<void> {}\""
        },
        {
          "name": "isLoggedIn",
          "type": "boolean"
        },
        {
          "name": "api",
          "description": "`FoxySDK.Customer.API` instance used by this element to communicate with the backend.",
          "type": "API"
        },
        {
          "name": "base",
          "attribute": "base",
          "description": "Bookmark URL for this API. This is where the tree traversal begins. We also use this URL as a base for relative paths.",
          "type": "string"
        },
        {
          "name": "level",
          "attribute": "level",
          "description": "Numeric Consola log level. If omitted, Consola defaults will be used.",
          "type": "number"
        },
        {
          "name": "storage",
          "attribute": "storage",
          "description": "Credentials storage implementing Web Storage API. Access tokens and other related info will be stored here. Defaults to in-memory storage.",
          "type": "string"
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "signout",
          "description": "Instance of `CustomerApi.SignOutEvent`. Dispatched on an element when session expires or code 401 is returned."
        },
        {
          "name": "signin",
          "description": "Instance of `CustomerApi.SignInEvent`. Dispatched on an element once authenticated."
        }
      ]
    },
    {
      "name": "foxy-customer-card",
      "path": "./src/elements/public/CustomerCard/index.ts",
      "description": "Basic card displaying a customer record.",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "templates",
          "type": "Partial<{ 'name:before': Renderer<CustomerCard>; 'name:after': Renderer<CustomerCard>; 'email:before': Renderer<CustomerCard>; 'email:after': Renderer<...>; }>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "name:before"
        },
        {
          "name": "name:after"
        },
        {
          "name": "email:before"
        },
        {
          "name": "email:after"
        }
      ]
    },
    {
      "name": "foxy-customer-form",
      "path": "./src/elements/public/CustomerForm/index.ts",
      "description": "Form element for creating or editing customers.",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "first-name:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "first-name:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "last-name:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "last-name:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "email:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "email:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "tax-id:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "tax-id:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "timestamps:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "timestamps:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "create:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "create:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "delete:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "delete:after",
          "description": "**new in v1.4.0**"
        }
      ]
    },
    {
      "name": "foxy-internal-customer-portal-logged-in-view",
      "path": "./src/elements/public/CustomerPortal/index.ts",
      "attributes": [
        {
          "name": "customer",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "customer",
          "attribute": "customer",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "loggingOutState",
          "default": "\"idle\""
        },
        {
          "name": "transactionsTableColumns",
          "default": "[]"
        },
        {
          "name": "loggingOutStateResetTimeout"
        },
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-internal-customer-portal-logged-out-view",
      "path": "./src/elements/public/CustomerPortal/index.ts",
      "attributes": [
        {
          "name": "group",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "page",
          "type": "string",
          "default": "\"sign-in\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "group",
          "attribute": "group",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "page",
          "attribute": "page",
          "type": "string",
          "default": "\"sign-in\""
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "lang",
          "attribute": "lang",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ]
    },
    {
      "name": "foxy-internal-customer-portal-subscriptions",
      "path": "./src/elements/public/CustomerPortal/index.ts",
      "attributes": [
        {
          "name": "group",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "lang",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "settings"
        },
        {
          "name": "customer"
        },
        {
          "name": "group",
          "attribute": "group",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ]
    },
    {
      "name": "foxy-internal-customer-portal-transactions",
      "path": "./src/elements/public/CustomerPortal/index.ts",
      "attributes": [
        {
          "name": "group",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "customer"
        },
        {
          "name": "columns",
          "default": "[]"
        },
        {
          "name": "group",
          "attribute": "group",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "lang",
          "attribute": "lang",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ]
    },
    {
      "name": "foxy-internal-customer-portal-change-password",
      "path": "./src/elements/public/CustomerPortal/index.ts",
      "attributes": [
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "customer",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "session",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "email",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "lang",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "fail"
        },
        {
          "name": "isErrorVisible",
          "default": "false"
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "customer",
          "attribute": "customer",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "session",
          "attribute": "session",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "email",
          "attribute": "email",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "step",
          "default": "1"
        },
        {
          "name": "lang",
          "attribute": "lang",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ]
    },
    {
      "name": "foxy-internal-customer-portal-link",
      "path": "./src/elements/public/CustomerPortal/index.ts",
      "attributes": [
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "href",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "icon",
          "type": "string",
          "default": "\"\""
        }
      ],
      "properties": [
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "href",
          "attribute": "href",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "icon",
          "attribute": "icon",
          "type": "string",
          "default": "\"\""
        }
      ]
    },
    {
      "name": "foxy-customer-portal",
      "path": "./src/elements/public/CustomerPortal/index.ts",
      "attributes": [
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "lang",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "base",
          "description": "Bookmark URL for this API. This is where the tree traversal begins. We also use this URL as a base for relative paths.",
          "type": "string"
        },
        {
          "name": "level",
          "description": "Numeric Consola log level. If omitted, Consola defaults will be used.",
          "type": "number"
        },
        {
          "name": "storage",
          "description": "Credentials storage implementing Web Storage API. Access tokens and other related info will be stored here. Defaults to in-memory storage.",
          "type": "string"
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "transactionsTableColumns",
          "description": "Same as `.columns` property on `foxy-transactions-table`. Sets columns of that table.",
          "default": "[\"priceColumn\",\"summaryColumn\",\"statusColumn\",\"idColumn\",\"dateColumn\",\"receiptColumn\"]"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "SignOutEvent",
          "type": "typeof (Anonymous class)",
          "default": "\"class extends CustomEvent<void> {}\""
        },
        {
          "name": "SignInEvent",
          "type": "typeof (Anonymous class)",
          "default": "\"class extends CustomEvent<void> {}\""
        },
        {
          "name": "isLoggedIn",
          "type": "boolean"
        },
        {
          "name": "api",
          "description": "`FoxySDK.Customer.API` instance used by this element to communicate with the backend.",
          "type": "API"
        },
        {
          "name": "base",
          "attribute": "base",
          "description": "Bookmark URL for this API. This is where the tree traversal begins. We also use this URL as a base for relative paths.",
          "type": "string"
        },
        {
          "name": "level",
          "attribute": "level",
          "description": "Numeric Consola log level. If omitted, Consola defaults will be used.",
          "type": "number"
        },
        {
          "name": "storage",
          "attribute": "storage",
          "description": "Credentials storage implementing Web Storage API. Access tokens and other related info will be stored here. Defaults to in-memory storage.",
          "type": "string"
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "signout",
          "description": "Instance of `CustomerApi.SignOutEvent`. Dispatched on an element when session expires or code 401 is returned."
        },
        {
          "name": "signin",
          "description": "Instance of `CustomerApi.SignInEvent`. Dispatched on an element once authenticated."
        }
      ]
    },
    {
      "name": "foxy-customer-portal-settings",
      "path": "./src/elements/public/CustomerPortalSettings/index.ts",
      "attributes": [
        {
          "name": "href",
          "type": "string"
        },
        {
          "name": "lang",
          "description": "Contains the language this component presents its translatable\ncontent in. Assigning a value to this property will load new\ntranslations in background and trigger a render afterwards.\n\n**Example:** `\"en\"`",
          "type": "string"
        },
        {
          "name": "ns",
          "description": "The namespace to look for the translations in. We use this property to\nsync namespace settings with the parent element and it's highly unlikely\nthat you'll ever need to set or read it in your code.\n\n**Example:** `\"admin\"`",
          "type": "string",
          "default": "\"defaultNS\""
        }
      ],
      "properties": [
        {
          "name": "rel",
          "type": "\"customer_portal_settings\"",
          "default": "\"customer_portal_settings\""
        },
        {
          "name": "href",
          "attribute": "href",
          "type": "string"
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Contains the language this component presents its translatable\ncontent in. Assigning a value to this property will load new\ntranslations in background and trigger a render afterwards.\n\n**Example:** `\"en\"`",
          "type": "string"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "description": "The namespace to look for the translations in. We use this property to\nsync namespace settings with the parent element and it's highly unlikely\nthat you'll ever need to set or read it in your code.\n\n**Example:** `\"admin\"`",
          "type": "string",
          "default": "\"defaultNS\""
        }
      ]
    },
    {
      "name": "foxy-customers-table",
      "path": "./src/elements/public/CustomersTable/index.ts",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "nameColumn",
          "type": "Column<Resource<Customers, undefined>>",
          "default": "{}"
        },
        {
          "name": "idColumn",
          "type": "Column<Resource<Customers, undefined>>",
          "default": "{\"hideBelow\":\"md\"}"
        },
        {
          "name": "dateColumn",
          "type": "Column<Resource<Customers, undefined>>",
          "default": "{\"hideBelow\":\"md\"}"
        },
        {
          "name": "emailColumn",
          "type": "Column<Resource<Customers, undefined>>",
          "default": "{}"
        },
        {
          "name": "columns",
          "description": "Array of column templates. See `Column` type for more details.",
          "type": "Column<Resource<Customers, undefined>>[]",
          "default": "[\"nameColumn\",\"idColumn\",\"dateColumn\",\"emailColumn\"]"
        },
        {
          "name": "templates",
          "type": "Templates<TData>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-discount-builder",
      "path": "./src/elements/public/DiscountBuilder/index.ts",
      "description": "Visual builder for discount URL parameters in coupons and more.\nLearn more about discounts here: [Foxy Wiki](https://wiki.foxycart.com/v/2.0/coupons_and_discounts).",
      "attributes": [
        {
          "name": "value",
          "description": "Discount URL parameter.\n\nNote that if you set this value, it **must be encoded** for the\nbuilder to work correctly. You can use either `encodeURIComponent` or `URLSearchParams` like so:\n\n```ts\ndiscountBuilder.value = new URLSearchParams([\n   ['discount_amount_percentage', 'Test{allunits|1-2|3-4}']\n]).toString();\n```",
          "type": "string"
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "value",
          "attribute": "value",
          "description": "Discount URL parameter.\n\nNote that if you set this value, it **must be encoded** for the\nbuilder to work correctly. You can use either `encodeURIComponent` or `URLSearchParams` like so:\n\n```ts\ndiscountBuilder.value = new URLSearchParams([\n   ['discount_amount_percentage', 'Test{allunits|1-2|3-4}']\n]).toString();\n```",
          "type": "string"
        },
        {
          "name": "parsedValue",
          "type": "ParsedValue"
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "lang",
          "attribute": "lang",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "change"
        }
      ]
    },
    {
      "name": "foxy-discount-card",
      "path": "./src/elements/public/DiscountCard/index.ts",
      "description": "Basic card displaying a discount.",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "type": "Templates<TData>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "title:before"
        },
        {
          "name": "title:after"
        },
        {
          "name": "subtitle:before"
        },
        {
          "name": "subtitle:after"
        }
      ]
    },
    {
      "name": "foxy-discount-detail-card",
      "path": "./src/elements/public/DiscountDetailCard/index.ts",
      "description": "Basic card displaying a discount detail.",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "type": "Templates<TData>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "title:before"
        },
        {
          "name": "title:after"
        },
        {
          "name": "subtitle:before"
        },
        {
          "name": "subtitle:after"
        }
      ]
    },
    {
      "name": "foxy-donation",
      "path": "./src/elements/public/Donation/index.ts",
      "description": "A custom element providing customizable donation forms.",
      "attributes": [
        {
          "name": "currency",
          "description": "**Required** 3-letter lowercase currency code.\n\n**Example:** `\"usd\"`",
          "type": "string"
        },
        {
          "name": "amount",
          "description": "**Required** donation amount in specified currency. When more than one amount option\nis available, this field will contain the selected amount. This value is deliberately not\nlimited to the predefined options: whatever you set it to will show up in the cart.\n\n**Example:** `25`",
          "type": "number"
        },
        {
          "name": "store",
          "description": "**Required** store domain. This is usually the part after before `.foxycart.com`\nand after `https://`, e.g. the `foxy-demo` bit of `https://foxy-demo.foxycart.com`.\nCustom domains like `my.domain.example.com` are also supported since v1.6.1.\n\n**Example:** `\"foxy-demo\"`",
          "type": "string"
        },
        {
          "name": "name",
          "description": "**Required** product name for this donation. This will show up in the cart when this form is submitted.\nSee [Products](https://wiki.foxycart.com/v/2.0/products) wiki for more details.\n\n**Example:** `\"One-time donation\"`",
          "type": "string"
        },
        {
          "name": "custom",
          "description": "Optional parts of the form including a custom (\"other\") option.\nAdding `amount` to this array will enable custom amount.\n\n**Example:** `[\"amount\"]`",
          "type": "array"
        },
        {
          "name": "amounts",
          "description": "Optional donation amount variants. If this property is set, the form will render\nthe amount selection interface. If this array includes the value of the `amount` property,\nit will be pre-selected in the form.\n\n**Example:** `[25, 50, 75]`",
          "type": "array"
        },
        {
          "name": "frequency",
          "description": "Optional donation frequency string encoded as count (integer) + units (one\nof: `d` for days, `w` for weeks, `m` for months, `y` for years). A special\nvalue for twice a month is also supported: `.5m`. If set, the form will\ncreate a subscription with the specified frequency in the cart. This value is deliberately not\nlimited to the predefined options: whatever you set it to will show up in the cart.\n\n**Example:** `\"1m\"`",
          "type": "string"
        },
        {
          "name": "frequencies",
          "description": "Optional donation frequency variants in the same format as `frequency`. If this property is set,\nthe form will render the frequency selection interface. If this array includes\nthe value of the `frequency` property, it will be pre-selected in the form.\n\n**Example:** `[\"7d\", \".5m\", \"1y\"]`",
          "type": "array"
        },
        {
          "name": "designation",
          "description": "Optional donation designation(s). The form will serialize and pass this value to the cart\non submission. This value is deliberately not limited to the predefined options:\nwhatever you set it to will show up in the cart.\n\n**Example:** `\"Medical Care\"`\n**Example:** `[\"Medical Care\", \"Daily Meals\"]`",
          "type": "array"
        },
        {
          "name": "designations",
          "description": "Optional donation designation(s) variants. If this property is set,\nthe form will render the designation selection interface: multiple choice\nif `designation` is an array and a single choice otherwise. All values overlapping\nwith the `designation` property will be pre-selected in the form.\n\n**Example:** `[\"Medical Care\", \"Daily Meals\", \"Area of Greatest Need\"]`",
          "type": "array"
        },
        {
          "name": "comment",
          "description": "Optional comment accompanying the donation. If set (even to an empty string),\nthe form will render a comment field. The value of this property will be updated\nas the customer enters their message and will be added to the order as a custom field in the end.\n\n**Example:** `\"\"`",
          "type": "string"
        },
        {
          "name": "anonymity",
          "description": "Optional switch controlling visibility of the anonymity checkbox. If set to `true`, the form\nwill render the checkbox. All changes in the value are reflected to the attribute.\n\n**Example:** `true`",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "anonymous",
          "description": "Optional switch marking this donation as anonymous via a custom field when set to `true`. When\nthe anonymity checkbox is rendered, also checks or unchecks it depending on the value.\nAll changes in the value are reflected to the attribute.\n\n**Example:** `true`",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "image",
          "description": "Optional product image URL (absolute path). This property affects cart UI only.\nSee [Products](https://wiki.foxycart.com/v/2.0/products) wiki for more details.\n\n**Example:** `\"https://picsum.photos/320\"`",
          "type": "string"
        },
        {
          "name": "code",
          "description": "Optional product code for this donation. This property affects cart UI only.\nSee [Products](https://wiki.foxycart.com/v/2.0/products) wiki for more details.\n\n**Example:** `\"ISBN 978-0-12-345678-9\"`",
          "type": "string"
        },
        {
          "name": "url",
          "description": "Optional product URL for this donation. Accepts a full URL to the product page, starting\nwith `http://` or `https://`, or a relative path to the produt from the store's\ndomain (as configured in the store settings). This property affects cart UI only.\nSee [Products](https://wiki.foxycart.com/v/2.0/products) wiki for more details.\n\n**Example:** `\"https://example.com/my-product\"`",
          "type": "string"
        },
        {
          "name": "cart",
          "description": "Optional cart\nIf set to 'add' will add items to the cart and, on submit, user is redirected to the cart.\nIf set to 'checkout', the default, on submit user is redirected to checkout directly",
          "type": "string",
          "default": "\"checkout\""
        },
        {
          "name": "empty",
          "description": "Optional empty\nIf set to 'true' clears the contents of the cart prior to adding the donation to the cart\nIf set to 'reset' clears the contents of the cart and cookies prior to adding the donation to the cart",
          "type": "string"
        },
        {
          "name": "target",
          "description": "Optional target to display the form response.",
          "type": "string",
          "default": "\"_top\""
        },
        {
          "name": "lang",
          "description": "Contains the language this component presents its translatable\ncontent in. Assigning a value to this property will load new\ntranslations in background and trigger a render afterwards.\n\n**Example:** `\"en\"`",
          "type": "string"
        },
        {
          "name": "ns",
          "description": "The namespace to look for the translations in. We use this property to\nsync namespace settings with the parent element and it's highly unlikely\nthat you'll ever need to set or read it in your code.\n\n**Example:** `\"admin\"`",
          "type": "string",
          "default": "\"defaultNS\""
        }
      ],
      "properties": [
        {
          "name": "currency",
          "attribute": "currency",
          "description": "**Required** 3-letter lowercase currency code.\n\n**Example:** `\"usd\"`",
          "type": "string"
        },
        {
          "name": "amount",
          "attribute": "amount",
          "description": "**Required** donation amount in specified currency. When more than one amount option\nis available, this field will contain the selected amount. This value is deliberately not\nlimited to the predefined options: whatever you set it to will show up in the cart.\n\n**Example:** `25`",
          "type": "number"
        },
        {
          "name": "store",
          "attribute": "store",
          "description": "**Required** store domain. This is usually the part after before `.foxycart.com`\nand after `https://`, e.g. the `foxy-demo` bit of `https://foxy-demo.foxycart.com`.\nCustom domains like `my.domain.example.com` are also supported since v1.6.1.\n\n**Example:** `\"foxy-demo\"`",
          "type": "string"
        },
        {
          "name": "name",
          "attribute": "name",
          "description": "**Required** product name for this donation. This will show up in the cart when this form is submitted.\nSee [Products](https://wiki.foxycart.com/v/2.0/products) wiki for more details.\n\n**Example:** `\"One-time donation\"`",
          "type": "string"
        },
        {
          "name": "custom",
          "attribute": "custom",
          "description": "Optional parts of the form including a custom (\"other\") option.\nAdding `amount` to this array will enable custom amount.\n\n**Example:** `[\"amount\"]`",
          "type": "array"
        },
        {
          "name": "amounts",
          "attribute": "amounts",
          "description": "Optional donation amount variants. If this property is set, the form will render\nthe amount selection interface. If this array includes the value of the `amount` property,\nit will be pre-selected in the form.\n\n**Example:** `[25, 50, 75]`",
          "type": "array"
        },
        {
          "name": "frequency",
          "attribute": "frequency",
          "description": "Optional donation frequency string encoded as count (integer) + units (one\nof: `d` for days, `w` for weeks, `m` for months, `y` for years). A special\nvalue for twice a month is also supported: `.5m`. If set, the form will\ncreate a subscription with the specified frequency in the cart. This value is deliberately not\nlimited to the predefined options: whatever you set it to will show up in the cart.\n\n**Example:** `\"1m\"`",
          "type": "string"
        },
        {
          "name": "frequencies",
          "attribute": "frequencies",
          "description": "Optional donation frequency variants in the same format as `frequency`. If this property is set,\nthe form will render the frequency selection interface. If this array includes\nthe value of the `frequency` property, it will be pre-selected in the form.\n\n**Example:** `[\"7d\", \".5m\", \"1y\"]`",
          "type": "array"
        },
        {
          "name": "designation",
          "attribute": "designation",
          "description": "Optional donation designation(s). The form will serialize and pass this value to the cart\non submission. This value is deliberately not limited to the predefined options:\nwhatever you set it to will show up in the cart.\n\n**Example:** `\"Medical Care\"`\n**Example:** `[\"Medical Care\", \"Daily Meals\"]`",
          "type": "array"
        },
        {
          "name": "designations",
          "attribute": "designations",
          "description": "Optional donation designation(s) variants. If this property is set,\nthe form will render the designation selection interface: multiple choice\nif `designation` is an array and a single choice otherwise. All values overlapping\nwith the `designation` property will be pre-selected in the form.\n\n**Example:** `[\"Medical Care\", \"Daily Meals\", \"Area of Greatest Need\"]`",
          "type": "array"
        },
        {
          "name": "comment",
          "attribute": "comment",
          "description": "Optional comment accompanying the donation. If set (even to an empty string),\nthe form will render a comment field. The value of this property will be updated\nas the customer enters their message and will be added to the order as a custom field in the end.\n\n**Example:** `\"\"`",
          "type": "string"
        },
        {
          "name": "anonymity",
          "attribute": "anonymity",
          "description": "Optional switch controlling visibility of the anonymity checkbox. If set to `true`, the form\nwill render the checkbox. All changes in the value are reflected to the attribute.\n\n**Example:** `true`",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "anonymous",
          "attribute": "anonymous",
          "description": "Optional switch marking this donation as anonymous via a custom field when set to `true`. When\nthe anonymity checkbox is rendered, also checks or unchecks it depending on the value.\nAll changes in the value are reflected to the attribute.\n\n**Example:** `true`",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "image",
          "attribute": "image",
          "description": "Optional product image URL (absolute path). This property affects cart UI only.\nSee [Products](https://wiki.foxycart.com/v/2.0/products) wiki for more details.\n\n**Example:** `\"https://picsum.photos/320\"`",
          "type": "string"
        },
        {
          "name": "code",
          "attribute": "code",
          "description": "Optional product code for this donation. This property affects cart UI only.\nSee [Products](https://wiki.foxycart.com/v/2.0/products) wiki for more details.\n\n**Example:** `\"ISBN 978-0-12-345678-9\"`",
          "type": "string"
        },
        {
          "name": "url",
          "attribute": "url",
          "description": "Optional product URL for this donation. Accepts a full URL to the product page, starting\nwith `http://` or `https://`, or a relative path to the produt from the store's\ndomain (as configured in the store settings). This property affects cart UI only.\nSee [Products](https://wiki.foxycart.com/v/2.0/products) wiki for more details.\n\n**Example:** `\"https://example.com/my-product\"`",
          "type": "string"
        },
        {
          "name": "cart",
          "attribute": "cart",
          "description": "Optional cart\nIf set to 'add' will add items to the cart and, on submit, user is redirected to the cart.\nIf set to 'checkout', the default, on submit user is redirected to checkout directly",
          "type": "string",
          "default": "\"checkout\""
        },
        {
          "name": "empty",
          "attribute": "empty",
          "description": "Optional empty\nIf set to 'true' clears the contents of the cart prior to adding the donation to the cart\nIf set to 'reset' clears the contents of the cart and cookies prior to adding the donation to the cart",
          "type": "string"
        },
        {
          "name": "target",
          "attribute": "target",
          "description": "Optional target to display the form response.",
          "type": "string",
          "default": "\"_top\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Contains the language this component presents its translatable\ncontent in. Assigning a value to this property will load new\ntranslations in background and trigger a render afterwards.\n\n**Example:** `\"en\"`",
          "type": "string"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "description": "The namespace to look for the translations in. We use this property to\nsync namespace settings with the parent element and it's highly unlikely\nthat you'll ever need to set or read it in your code.\n\n**Example:** `\"admin\"`",
          "type": "string",
          "default": "\"defaultNS\""
        }
      ],
      "events": [
        {
          "name": "change",
          "description": "Instance of `Donation.events.change`. Emitted after user input triggers a change in the form data."
        },
        {
          "name": "submit",
          "description": "Instance of `Donation.events.submit`. Emitted when the form is submitted. Cancelling this event will stop the submission."
        }
      ],
      "slots": [
        {
          "name": "amount",
          "description": "Space below the amount selector, if it's visible."
        },
        {
          "name": "designation",
          "description": "Space below the designation selector, if it's visible."
        },
        {
          "name": "comment",
          "description": "Space below the comment field, if it's visible."
        }
      ]
    },
    {
      "name": "foxy-downloadable-card",
      "path": "./src/elements/public/DownloadableCard/index.ts",
      "description": "Basic card displaying a downloadable resource (`fx:downloadable`).\nIcons by {@link https://heroicons.com}.",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "type": "Templates<TData>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-downloadable-form",
      "path": "./src/elements/public/DownloadableForm/index.ts",
      "description": "Basic form for managing `fx:downloadable` resources.\nThis element requires an augmented version of hAPI currently limited\nonly to the new Foxy Admin.",
      "attributes": [
        {
          "name": "downloadable-item-categories",
          "description": "URL of the `fx:downloadable_item_categories` collection for the store."
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "downloadableItemCategories",
          "attribute": "downloadable-item-categories",
          "description": "URL of the `fx:downloadable_item_categories` collection for the store."
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "item-category-uri:before"
        },
        {
          "name": "item-category-uri:after"
        },
        {
          "name": "name:before"
        },
        {
          "name": "name:after"
        },
        {
          "name": "code:before"
        },
        {
          "name": "code:after"
        },
        {
          "name": "price:before"
        },
        {
          "name": "price:after"
        },
        {
          "name": "upload:before"
        },
        {
          "name": "upload:after"
        },
        {
          "name": "timestamps:before"
        },
        {
          "name": "timestamps:after"
        },
        {
          "name": "create:before"
        },
        {
          "name": "create:after"
        },
        {
          "name": "delete:before"
        },
        {
          "name": "delete:after"
        }
      ]
    },
    {
      "name": "foxy-email-template-card",
      "path": "./src/elements/public/EmailTemplateCard/index.ts",
      "description": "Card element displaying an email template (`fx:email_template`).",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "type": "Templates<TData>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "title:before"
        },
        {
          "name": "title:after"
        },
        {
          "name": "subtitle:before"
        },
        {
          "name": "subtitle:after"
        }
      ]
    },
    {
      "name": "foxy-email-template-form",
      "path": "./src/elements/public/EmailTemplateForm/index.ts",
      "description": "Form element for creating or editing email templates (`fx:email_template`).",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "description:before"
        },
        {
          "name": "description:after"
        },
        {
          "name": "template-language:before"
        },
        {
          "name": "template-language:after"
        },
        {
          "name": "content:before"
        },
        {
          "name": "content:after"
        },
        {
          "name": "timestamps:before"
        },
        {
          "name": "timestamps:after"
        },
        {
          "name": "create:before"
        },
        {
          "name": "create:after"
        },
        {
          "name": "delete:before"
        },
        {
          "name": "delete:after"
        }
      ]
    },
    {
      "name": "foxy-error-entry-card",
      "path": "./src/elements/public/ErrorEntryCard/index.ts",
      "description": "Displays an ErrorEntry from the Log of FoxyAPI.",
      "attributes": [
        {
          "name": "open",
          "description": "If true, displays the error details.\nAdditionally, sets `form.hide_error` to `true` and submits changes on first view.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "open",
          "attribute": "open",
          "description": "If true, displays the error details.\nAdditionally, sets `form.hide_error` to `true` and submits changes on first view.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-filter-attribute-card",
      "path": "./src/elements/public/FilterAttributeCard/index.ts",
      "description": "Card element displaying a saved filter in Admin. Saved filters\nare powered by the Bookmark attribute format that allows adding custom sidebar items\nto Admin. Bookmark attributes are named `foxy-admin-bookmark` and contain a\nrelative URL of the bookmarked Admin page in the value.",
      "attributes": [
        {
          "name": "count-refresh-interval",
          "type": "number",
          "default": "600000"
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "filterQueryKey",
          "type": "string",
          "default": "\"filter_query\""
        },
        {
          "name": "filterNameKey",
          "type": "string",
          "default": "\"filter_name\""
        },
        {
          "name": "countRefreshInterval",
          "attribute": "count-refresh-interval",
          "type": "number",
          "default": "600000"
        },
        {
          "name": "getCountLoaderHref"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-filter-attribute-form",
      "path": "./src/elements/public/FilterAttributeForm/index.ts",
      "description": "Form element for creating and editing saved filters in Admin. Saved filters\nare powered by the Bookmark attribute format that allows adding custom sidebar items\nto Admin. Bookmark attributes are named `foxy-admin-bookmark` and contain a\nrelative URL of the bookmarked Admin page in the value.",
      "attributes": [
        {
          "name": "pathname",
          "description": "Admin page pathname."
        },
        {
          "name": "options",
          "description": "Filter options passed down to `QueryBuilder.options.`",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "attributeVisibility",
          "type": "\"public\" | \"private\" | \"restricted\"",
          "default": "\"restricted\""
        },
        {
          "name": "filterQueryKey",
          "type": "string",
          "default": "\"filter_query\""
        },
        {
          "name": "attributeName",
          "type": "string",
          "default": "\"foxy-admin-bookmark\""
        },
        {
          "name": "filterNameKey",
          "type": "string",
          "default": "\"filter_name\""
        },
        {
          "name": "pathname",
          "attribute": "pathname",
          "description": "Admin page pathname."
        },
        {
          "name": "options",
          "attribute": "options",
          "description": "Filter options passed down to `QueryBuilder.options.`",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "filter-query:before"
        },
        {
          "name": "filter-query:after"
        },
        {
          "name": "filter-name:before"
        },
        {
          "name": "filter-name:after"
        },
        {
          "name": "action:before"
        },
        {
          "name": "action:after"
        }
      ]
    },
    {
      "name": "foxy-form-dialog",
      "path": "./src/elements/public/FormDialog/index.ts",
      "description": "Dialog wrapper for the forms made with NucleonElement.",
      "attributes": [
        {
          "name": "keep-open-on-delete",
          "description": "If true, FormDialog won't automatically close after the associated form deletes the resource.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "keep-open-on-post",
          "description": "If true, FormDialog won't automatically close after the associated form creates a resource.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources (passed to form).",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this resource belongs to (passed to form).",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load (passed to form).",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "form",
          "description": "Form's custom element tag. Generated custom element will have the following attributes:\n\n- `parent` – same as `foxy-form-dialog[parent]`;\n- `href` – same as `foxy-form-dialog[href]`;\n- `lang` – same as `foxy-form-dialog[lang]`;",
          "type": "string"
        },
        {
          "name": "centered",
          "type": "boolean"
        },
        {
          "name": "closable",
          "description": "When true, renders Close button in the header.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "editable",
          "description": "When true, renders Save button in the header.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "header",
          "description": "Header text or a i18next key for it.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "group",
          "description": "NucleonElement's Rumour sync group.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "alert",
          "description": "When true, centers a dialog on the screen and does not animate the stack under.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "wide",
          "description": "When true, dialog window will a larger maximum width.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "open",
          "description": "True if dialog is mounted and has finished entering the screen.",
          "type": "boolean"
        },
        {
          "name": "lang",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "keepOpenOnDelete",
          "attribute": "keep-open-on-delete",
          "description": "If true, FormDialog won't automatically close after the associated form deletes the resource.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "keepOpenOnPost",
          "attribute": "keep-open-on-post",
          "description": "If true, FormDialog won't automatically close after the associated form creates a resource.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources (passed to form).",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this resource belongs to (passed to form).",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load (passed to form).",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "form",
          "attribute": "form",
          "description": "Form's custom element tag. Generated custom element will have the following attributes:\n\n- `parent` – same as `foxy-form-dialog[parent]`;\n- `href` – same as `foxy-form-dialog[href]`;\n- `lang` – same as `foxy-form-dialog[lang]`;",
          "type": "string"
        },
        {
          "name": "dialogWindowsHost",
          "description": "Selector of an element that will serve as a mounting point to all dialog windows.\nIt's `<body>` by default, but you can add your own element with `id=\"foxy-dialog-windows-host\"`\nanywhere in the light DOM to render dialogs there.",
          "type": "\"#foxy-dialog-windows-host, body\"",
          "default": "\"#foxy-dialog-windows-host, body\""
        },
        {
          "name": "dialogWindows",
          "description": "Map of all dialog windows linked to their dialog elements.",
          "type": "WeakMap<Dialog, DialogWindow>",
          "default": "\"new WeakMap<Dialog, DialogWindow>()\""
        },
        {
          "name": "openDialogs",
          "description": "List of all currently open dialogs.",
          "type": "Dialog[]",
          "default": "[]"
        },
        {
          "name": "ShowEvent",
          "description": "Instance of this event will be dispatched on a dialog when it finishes entering the screen.\nThis event does not bubble and can't cross shadow DOM boundary.",
          "type": "typeof DialogShowEvent",
          "default": "\"DialogShowEvent\""
        },
        {
          "name": "HideEvent",
          "description": "Instance of this event will be dispatched on a dialog when it finishes leaving the screen.\nThis event does not bubble and can't cross shadow DOM boundary.",
          "type": "typeof DialogHideEvent",
          "default": "\"DialogHideEvent\""
        },
        {
          "name": "centered",
          "attribute": "centered",
          "type": "boolean"
        },
        {
          "name": "closable",
          "attribute": "closable",
          "description": "When true, renders Close button in the header.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "editable",
          "attribute": "editable",
          "description": "When true, renders Save button in the header.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "header",
          "attribute": "header",
          "description": "Header text or a i18next key for it.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "NucleonElement's Rumour sync group.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "alert",
          "attribute": "alert",
          "description": "When true, centers a dialog on the screen and does not animate the stack under.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "wide",
          "attribute": "wide",
          "description": "When true, dialog window will a larger maximum width.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "open",
          "attribute": "open",
          "description": "True if dialog is mounted and has finished entering the screen.",
          "type": "boolean"
        },
        {
          "name": "lang",
          "attribute": "lang",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "show",
          "description": "Instance of `FormDialog.ShowEvent`. Dispatched after dialog finishes entry transition."
        },
        {
          "name": "hide",
          "description": "Instance of `FormDialog.HideEvent`. Dispatched after dialog finishes exit transition."
        }
      ]
    },
    {
      "name": "foxy-generate-codes-form",
      "path": "./src/elements/public/GenerateCodesForm/index.ts",
      "description": "Form element for generating codes for coupons or gift cards (`fx:generate_codes`).",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "length:before"
        },
        {
          "name": "length:after"
        },
        {
          "name": "number-of-codes:before"
        },
        {
          "name": "number-of-codes:after"
        },
        {
          "name": "prefix:before"
        },
        {
          "name": "prefix:after"
        },
        {
          "name": "current-balance:before"
        },
        {
          "name": "current-balance:after"
        },
        {
          "name": "generate:before"
        },
        {
          "name": "generate:after"
        }
      ]
    },
    {
      "name": "foxy-gift-card-card",
      "path": "./src/elements/public/GiftCardCard/index.ts",
      "description": "Basic card displaying a gift card.",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "templates",
          "type": "Partial<{ 'title:before': Renderer<GiftCardCard>; 'title:after': Renderer<GiftCardCard>; 'status:before': Renderer<GiftCardCard>; 'status:after': Renderer<...>; }>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "title:before"
        },
        {
          "name": "title:after"
        },
        {
          "name": "status:before"
        },
        {
          "name": "status:after"
        }
      ]
    },
    {
      "name": "foxy-gift-card-code-form",
      "path": "./src/elements/public/GiftCardCodeForm/index.ts",
      "description": "Form element for creating or editing gift card codes (`fx:gift_card_code`).",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "code:before"
        },
        {
          "name": "code:after"
        },
        {
          "name": "current-balance:before"
        },
        {
          "name": "current-balance:after"
        },
        {
          "name": "end-date:before"
        },
        {
          "name": "end-date:after"
        },
        {
          "name": "timestamps:before"
        },
        {
          "name": "timestamps:after"
        },
        {
          "name": "delete:before"
        },
        {
          "name": "delete:after"
        },
        {
          "name": "create:before"
        },
        {
          "name": "create:after"
        }
      ]
    },
    {
      "name": "foxy-gift-card-code-log-card",
      "path": "./src/elements/public/GiftCardCodeLogCard/index.ts",
      "description": "Card element representing a gift card code log (`fx:gift_card_code_log`).",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-gift-card-codes-form",
      "path": "./src/elements/public/GiftCardCodesForm/index.ts",
      "description": "Form element for importing gift card codes (`fx:gift_card_codes`).",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "codes:before"
        },
        {
          "name": "codes:after"
        },
        {
          "name": "current-balance:before"
        },
        {
          "name": "current-balance:after"
        },
        {
          "name": "import:before"
        },
        {
          "name": "import:after"
        }
      ]
    },
    {
      "name": "foxy-internal-gift-card-codes-form-list-item",
      "path": "./src/elements/public/GiftCardCodesForm/index.ts",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-gift-card-form",
      "path": "./src/elements/public/GiftCardForm/index.ts",
      "description": "Form element for creating or editing gift cards (`fx:gift_card`).",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "name:before"
        },
        {
          "name": "name:after"
        },
        {
          "name": "currency:before"
        },
        {
          "name": "currency:after"
        },
        {
          "name": "expires:before"
        },
        {
          "name": "expires:after"
        },
        {
          "name": "codes:before"
        },
        {
          "name": "codes:after"
        },
        {
          "name": "product-restrictions:before"
        },
        {
          "name": "product-restrictions:after"
        },
        {
          "name": "category-restrictions:before"
        },
        {
          "name": "category-restrictions:after"
        },
        {
          "name": "timestamps:before"
        },
        {
          "name": "timestamps:after"
        },
        {
          "name": "delete:before"
        },
        {
          "name": "delete:after"
        },
        {
          "name": "create:before"
        },
        {
          "name": "create:after"
        }
      ]
    },
    {
      "name": "foxy-i18n",
      "path": "./src/elements/public/I18n/index.ts",
      "description": "Custom element for effortless localization with i18next.",
      "attributes": [
        {
          "name": "options",
          "description": "Optional i18next translation function\n[options](https://www.i18next.com/translation-function/essentials#overview-options).",
          "type": "object",
          "default": "{}"
        },
        {
          "name": "key",
          "description": "Optional key to translate. Empty by default (renders nothing).\nSee [i18next docs](https://www.i18next.com/translation-function/essentials#accessing-keys) for more info.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "lang",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "FetchEvent",
          "description": "Instances of this event are dispatched on an element before each translation request.",
          "type": "typeof FetchEvent",
          "default": "\"FetchEvent\""
        },
        {
          "name": "i18next",
          "description": "Shared [i18next](https://www.i18next.com) instance for all I18n elements.",
          "type": "i18n",
          "default": "\"i18next.createInstance().use(backend)\""
        },
        {
          "name": "options",
          "attribute": "options",
          "description": "Optional i18next translation function\n[options](https://www.i18next.com/translation-function/essentials#overview-options).",
          "type": "object",
          "default": "{}"
        },
        {
          "name": "key",
          "attribute": "key",
          "description": "Optional key to translate. Empty by default (renders nothing).\nSee [i18next docs](https://www.i18next.com/translation-function/essentials#accessing-keys) for more info.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "fetch",
          "description": "Instance of `I18n.FetchEvent`. Emitted before each translation request."
        }
      ]
    },
    {
      "name": "foxy-i18n-editor",
      "path": "./src/elements/public/I18nEditor/index.ts",
      "description": "Editor for language string overrides. Loads language strings\nproperty helper (`fx:language_strings`) as main resource.",
      "attributes": [
        {
          "name": "language-overrides",
          "description": "URL of the `fx:language_overrides` resource for a template set."
        },
        {
          "name": "selected-language",
          "description": "Language from the `fx:language_strings` property helper for which the default values will be pulled from."
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "languageOverrides",
          "attribute": "language-overrides",
          "description": "URL of the `fx:language_overrides` resource for a template set."
        },
        {
          "name": "selectedLanguage",
          "attribute": "selected-language",
          "description": "Language from the `fx:language_strings` property helper for which the default values will be pulled from."
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-integration-card",
      "path": "./src/elements/public/IntegrationCard/index.ts",
      "description": "Card element representing an integration (`fx:integration`).",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-integration-form",
      "path": "./src/elements/public/IntegrationForm/index.ts",
      "description": "Form element for managing integrations (`fx:integration`).",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "project-name:before"
        },
        {
          "name": "project-name:after"
        },
        {
          "name": "project-description:before"
        },
        {
          "name": "project-description:after"
        },
        {
          "name": "create:before"
        },
        {
          "name": "create:after"
        },
        {
          "name": "header:before"
        },
        {
          "name": "header:after"
        },
        {
          "name": "message:before"
        },
        {
          "name": "message:after"
        },
        {
          "name": "table:before"
        },
        {
          "name": "table:after"
        },
        {
          "name": "delete:before"
        },
        {
          "name": "delete:after"
        }
      ]
    },
    {
      "name": "foxy-item-card",
      "path": "./src/elements/public/ItemCard/index.ts",
      "description": "Basic card displaying an item.",
      "attributes": [
        {
          "name": "locale-codes",
          "type": "string"
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "localeCodes",
          "attribute": "locale-codes",
          "type": "string"
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-item-category-card",
      "path": "./src/elements/public/ItemCategoryCard/index.ts",
      "description": "Card element representing an item category (`fx:item_category`).",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "type": "Templates<TData>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "title:before"
        },
        {
          "name": "title:after"
        },
        {
          "name": "subtitle:before"
        },
        {
          "name": "subtitle:after"
        }
      ]
    },
    {
      "name": "foxy-item-category-form",
      "path": "./src/elements/public/ItemCategoryForm/index.ts",
      "description": "Form element for item categories (`fx:item_category`).",
      "attributes": [
        {
          "name": "email-templates",
          "description": "URL of the `fx:email_templates` collection for a store."
        },
        {
          "name": "taxes",
          "description": "URL of the `fx:taxes` collection for a store."
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "emailTemplates",
          "attribute": "email-templates",
          "description": "URL of the `fx:email_templates` collection for a store."
        },
        {
          "name": "taxes",
          "attribute": "taxes",
          "description": "URL of the `fx:taxes` collection for a store."
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "description": "Template render functions mapped to their name.",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "name:before"
        },
        {
          "name": "name:after"
        },
        {
          "name": "code:before"
        },
        {
          "name": "code:after"
        },
        {
          "name": "handling-fee-type:before"
        },
        {
          "name": "handling-fee-type:after"
        },
        {
          "name": "handling-fee:before"
        },
        {
          "name": "handling-fee:after"
        },
        {
          "name": "handling-fee-percentage:before"
        },
        {
          "name": "handling-fee-percentage:after"
        },
        {
          "name": "handling-fee-minimum:before"
        },
        {
          "name": "handling-fee-minimum:after"
        },
        {
          "name": "item-delivery-type:before"
        },
        {
          "name": "item-delivery-type:after"
        },
        {
          "name": "max-downloads-per-customer:before"
        },
        {
          "name": "max-downloads-per-customer:after"
        },
        {
          "name": "max-downloads-time-period:before"
        },
        {
          "name": "max-downloads-time-period:after"
        },
        {
          "name": "shipping-flat-rate:before"
        },
        {
          "name": "shipping-flat-rate:after"
        },
        {
          "name": "shipping-flat-rate-type:before"
        },
        {
          "name": "shipping-flat-rate-type:after"
        },
        {
          "name": "default-weight:before"
        },
        {
          "name": "default-weight:after"
        },
        {
          "name": "default-weight-unit:before"
        },
        {
          "name": "default-weight-unit:after"
        },
        {
          "name": "default-length-unit:before"
        },
        {
          "name": "default-length-unit:after"
        },
        {
          "name": "customs-value:before"
        },
        {
          "name": "customs-value:after"
        },
        {
          "name": "discount-name:before"
        },
        {
          "name": "discount-name:after"
        },
        {
          "name": "discount-builder:before"
        },
        {
          "name": "discount-builder:after"
        },
        {
          "name": "admin-email-template-uri:before"
        },
        {
          "name": "admin-email-template-uri:after"
        },
        {
          "name": "customer-email-template-uri:before"
        },
        {
          "name": "customer-email-template-uri:after"
        },
        {
          "name": "gift-recipient-email-template-uri:before"
        },
        {
          "name": "gift-recipient-email-template-uri:after"
        },
        {
          "name": "taxes:before"
        },
        {
          "name": "taxes:after"
        },
        {
          "name": "timestamps:before"
        },
        {
          "name": "timestamps:after"
        },
        {
          "name": "create:before"
        },
        {
          "name": "create:after"
        },
        {
          "name": "delete:before"
        },
        {
          "name": "delete:after"
        }
      ]
    },
    {
      "name": "foxy-item-form",
      "path": "./src/elements/public/ItemForm/index.ts",
      "description": "Form element for creating or editing items (`fx:item`).",
      "attributes": [
        {
          "name": "customer-addresses",
          "description": "Link to the collection of customer addresses that can be used with this item.",
          "type": "string"
        },
        {
          "name": "item-categories",
          "description": "Link to the collection of item categories that can be used with this item.",
          "type": "string"
        },
        {
          "name": "locale-codes",
          "description": "Link to the `fx:locale_codes` property helper for currency formatting."
        },
        {
          "name": "coupons",
          "description": "Link to the collection of coupons that can be used with this item.",
          "type": "string"
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "customerAddresses",
          "attribute": "customer-addresses",
          "description": "Link to the collection of customer addresses that can be used with this item.",
          "type": "string"
        },
        {
          "name": "itemCategories",
          "attribute": "item-categories",
          "description": "Link to the collection of item categories that can be used with this item.",
          "type": "string"
        },
        {
          "name": "localeCodes",
          "attribute": "locale-codes",
          "description": "Link to the `fx:locale_codes` property helper for currency formatting."
        },
        {
          "name": "coupons",
          "attribute": "coupons",
          "description": "Link to the collection of coupons that can be used with this item.",
          "type": "string"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "name:before"
        },
        {
          "name": "name:after"
        },
        {
          "name": "price:before"
        },
        {
          "name": "price:after"
        },
        {
          "name": "quantity:before"
        },
        {
          "name": "quantity:after"
        },
        {
          "name": "subscription:before"
        },
        {
          "name": "subscription:after"
        },
        {
          "name": "line-item-discount:before"
        },
        {
          "name": "line-item-discount:after"
        },
        {
          "name": "cart:before"
        },
        {
          "name": "cart:after"
        },
        {
          "name": "shipping:before"
        },
        {
          "name": "shipping:after"
        },
        {
          "name": "inventory:before"
        },
        {
          "name": "inventory:after"
        },
        {
          "name": "timestamps:before"
        },
        {
          "name": "timestamps:after"
        },
        {
          "name": "delete:before"
        },
        {
          "name": "delete:after"
        },
        {
          "name": "create:before"
        },
        {
          "name": "create:after"
        }
      ]
    },
    {
      "name": "foxy-item-option-card",
      "path": "./src/elements/public/ItemOptionCard/index.ts",
      "description": "Basic card displaying an item option.",
      "attributes": [
        {
          "name": "locale-codes"
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "localeCodes",
          "attribute": "locale-codes"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "type": "Templates<TData>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "title:before"
        },
        {
          "name": "title:after"
        },
        {
          "name": "subtitle:before"
        },
        {
          "name": "subtitle:after"
        }
      ]
    },
    {
      "name": "foxy-item-option-form",
      "path": "./src/elements/public/ItemOptionForm/index.ts",
      "description": "Form element for creating or editing item options (`fx:item_option`).",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "name:before"
        },
        {
          "name": "name:after"
        },
        {
          "name": "value:before"
        },
        {
          "name": "value:after"
        },
        {
          "name": "price-mod:before"
        },
        {
          "name": "price-mod:after"
        },
        {
          "name": "weight-mod:before"
        },
        {
          "name": "weight-mod:after"
        }
      ]
    },
    {
      "name": "foxy-items-form",
      "path": "./src/elements/public/ItemsForm/index.ts",
      "description": "A custom element providing a customizable donation form.",
      "attributes": [
        {
          "name": "store",
          "description": "**Required** store subdomain, It is similar to mystore.foxycart.com,\nunless you use a custom subdomain.\n\n**Examples:** `\"mystore.foxycart.com\"` `\"custom.mycoolstore.com\"`",
          "type": "string"
        },
        {
          "name": "currency",
          "description": "**Required** 3-letter lowercase currency code.\n\n**Example:** `\"usd\"`",
          "type": "string"
        },
        {
          "name": "readonly",
          "description": "Makes the entire form readonly.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "target",
          "description": "Defines target of the form\n\nThis attribute controls the destination window of the form submission.",
          "type": "string",
          "default": "\"_top\""
        },
        {
          "name": "cart",
          "description": "Defines the next cart step\n\nIt can only be either add or checkout.\nIf \"add\" is chosen, this form will add items to the cart and the user will\nbe directed to the cart with these products added upon submission.\n\nIf set to \"checkout\" (this is the default) the user will be directed to\ncheckout.",
          "type": "string",
          "default": "\"checkout\""
        },
        {
          "name": "sub_frequency",
          "description": "Optional frequency string encoded as count (integer) + units (one of: `d`\nfor days, `w` for weeks, `m` for months, `y` for years). A special value\nfor twice a month is also supported: `.5m`. If set, the form will create a\nsubscription with the specified frequency in the cart.\n\n**Example:** `\"1m\"`",
          "type": "string"
        },
        {
          "name": "sub_startdate",
          "description": "Optional subscription start date encoded as four integer for the year, two\nfor the month and two for the day. If only two or one digits are provided,\nit is assumed to be next occurence of that day of the month, from the\ncurrent date.\n\nSee [Products wiki for more details](https://wiki.foxycart.com/v/2.0/products#a_complete_list_of_product_parameters)\n\n** Example:** `\"10\"`",
          "type": "string"
        },
        {
          "name": "sub_token",
          "description": "Optional subscription token, unique URL of a subscription, retrieved from\nthe API, XML datafeeds or Admin interface.",
          "type": "string"
        },
        {
          "name": "sub_modify",
          "description": "Optional. Allows the “add to cart” link or form to completely replace the\nexisting subscription loaded\n\nCan be either \"replace\", \"append\" or \"\" (a blank string).\nUsing \"append\" or \"\" will result in adding these items to an existing\nsubscription in addition to the existing ones.\n\nThe \"append\" value is set for convenience, as it describes the behaviour.\nThe submitted value, in this case, will be \"\". The submitted value, in\nthis case, will be \"\".\n\nUsing \"replace\" results in replacing the existing subscription with the\ncurrent itmes.\nSee [Products subscription options](https://wiki.foxycart.com/v/2.0/products/subscriptions#subscription-related_product_options)",
          "type": "string",
          "default": "\"replace\""
        },
        {
          "name": "sub_restart",
          "description": "Set to \"true\" to indicate that payment is collectable right now.\nSet to \"auto\" to indicate that payment is collectable right now if the\nsubscription's past-due amount is greater than 0",
          "type": "string",
          "default": "\"auto\""
        },
        {
          "name": "sub_enddate",
          "description": "Optional subscription end date encoded as four integer for the year, two\nfor the month and two for the day.\n\nThe absence of a sub_enddate, together with a sub_frequency, means a\nsubscription with indefinite and date.\n\nSee [Products wiki for more details](https://wiki.foxycart.com/v/2.0/products#a_complete_list_of_product_parameters)\n\n** Example:** `\"20221010\"`",
          "type": "string"
        },
        {
          "name": "frequencies",
          "description": "Optional frequency variants in the same format as `frequency`. If this property is set,\nthe form will render the frequency selection interface. If this array includes\nthe value of the `frequency` property, it will be pre-selected in the form.\n\n**Example:** `[\"7d\", \".5m\", \"1y\"]`",
          "default": "[]"
        },
        {
          "name": "items",
          "description": "Optional an array of ItemInterface objects with at least the following properties:\n- name: the name of the item\n- price: the price of each of this item\nThe following optional properties will be used:\n- quantity: (defaults to 1) how many of each item are added to the form\n- image: an image url to be displayed in the form for this item\n- items: an array of other items that are to be treated as bundled with this item\n- signatures: an object containing a key value list of previously generated HMAC validation codes\n\nOther item properties are accepted and sent to foxy cart\nSee [Products wiki for more details](https://wiki.foxycart.com/v/2.0/products#a_complete_list_of_product_parameters)",
          "type": "array"
        },
        {
          "name": "signatures",
          "description": "Optional open: An Object with key, value pairs where the key is a item\nattribute and the value is a previously computed HMAC validation code.\n\n**Important security information:** this web component does not generate or validates the HMAC validation code.\nPlease, refer to [the Product Verification page](https://wiki.foxycart.com/v/2.0/hmac_validation) for more information and tools for generating the codes.",
          "type": "object"
        },
        {
          "name": "open",
          "description": "Optional open: An Object with key, value pairs where the key is a item\nattribute and the value is a boolean indicating that the property is editable by the user.\n\n**Advanced use only**: this web component does not provide means for the user to alter item attributes.\n\nSee [Product Verification](https://wiki.foxycart.com/v/2.0/hmac_validation) for more information.",
          "type": "object"
        },
        {
          "name": "lang",
          "description": "Contains the language this component presents its translatable\ncontent in. Assigning a value to this property will load new\ntranslations in background and trigger a render afterwards.\n\n**Example:** `\"en\"`",
          "type": "string"
        },
        {
          "name": "ns",
          "description": "The namespace to look for the translations in. We use this property to\nsync namespace settings with the parent element and it's highly unlikely\nthat you'll ever need to set or read it in your code.\n\n**Example:** `\"admin\"`",
          "type": "string",
          "default": "\"defaultNS\""
        }
      ],
      "properties": [
        {
          "name": "store",
          "attribute": "store",
          "description": "**Required** store subdomain, It is similar to mystore.foxycart.com,\nunless you use a custom subdomain.\n\n**Examples:** `\"mystore.foxycart.com\"` `\"custom.mycoolstore.com\"`",
          "type": "string"
        },
        {
          "name": "currency",
          "attribute": "currency",
          "description": "**Required** 3-letter lowercase currency code.\n\n**Example:** `\"usd\"`",
          "type": "string"
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "description": "Makes the entire form readonly.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "target",
          "attribute": "target",
          "description": "Defines target of the form\n\nThis attribute controls the destination window of the form submission.",
          "type": "string",
          "default": "\"_top\""
        },
        {
          "name": "cart",
          "attribute": "cart",
          "description": "Defines the next cart step\n\nIt can only be either add or checkout.\nIf \"add\" is chosen, this form will add items to the cart and the user will\nbe directed to the cart with these products added upon submission.\n\nIf set to \"checkout\" (this is the default) the user will be directed to\ncheckout.",
          "type": "string",
          "default": "\"checkout\""
        },
        {
          "name": "sub_frequency",
          "attribute": "sub_frequency",
          "description": "Optional frequency string encoded as count (integer) + units (one of: `d`\nfor days, `w` for weeks, `m` for months, `y` for years). A special value\nfor twice a month is also supported: `.5m`. If set, the form will create a\nsubscription with the specified frequency in the cart.\n\n**Example:** `\"1m\"`",
          "type": "string"
        },
        {
          "name": "sub_startdate",
          "attribute": "sub_startdate",
          "description": "Optional subscription start date encoded as four integer for the year, two\nfor the month and two for the day. If only two or one digits are provided,\nit is assumed to be next occurence of that day of the month, from the\ncurrent date.\n\nSee [Products wiki for more details](https://wiki.foxycart.com/v/2.0/products#a_complete_list_of_product_parameters)\n\n** Example:** `\"10\"`",
          "type": "string"
        },
        {
          "name": "sub_token",
          "attribute": "sub_token",
          "description": "Optional subscription token, unique URL of a subscription, retrieved from\nthe API, XML datafeeds or Admin interface.",
          "type": "string"
        },
        {
          "name": "sub_modify",
          "attribute": "sub_modify",
          "description": "Optional. Allows the “add to cart” link or form to completely replace the\nexisting subscription loaded\n\nCan be either \"replace\", \"append\" or \"\" (a blank string).\nUsing \"append\" or \"\" will result in adding these items to an existing\nsubscription in addition to the existing ones.\n\nThe \"append\" value is set for convenience, as it describes the behaviour.\nThe submitted value, in this case, will be \"\". The submitted value, in\nthis case, will be \"\".\n\nUsing \"replace\" results in replacing the existing subscription with the\ncurrent itmes.\nSee [Products subscription options](https://wiki.foxycart.com/v/2.0/products/subscriptions#subscription-related_product_options)",
          "type": "string",
          "default": "\"replace\""
        },
        {
          "name": "sub_restart",
          "attribute": "sub_restart",
          "description": "Set to \"true\" to indicate that payment is collectable right now.\nSet to \"auto\" to indicate that payment is collectable right now if the\nsubscription's past-due amount is greater than 0",
          "type": "string",
          "default": "\"auto\""
        },
        {
          "name": "sub_enddate",
          "attribute": "sub_enddate",
          "description": "Optional subscription end date encoded as four integer for the year, two\nfor the month and two for the day.\n\nThe absence of a sub_enddate, together with a sub_frequency, means a\nsubscription with indefinite and date.\n\nSee [Products wiki for more details](https://wiki.foxycart.com/v/2.0/products#a_complete_list_of_product_parameters)\n\n** Example:** `\"20221010\"`",
          "type": "string"
        },
        {
          "name": "frequencies",
          "attribute": "frequencies",
          "description": "Optional frequency variants in the same format as `frequency`. If this property is set,\nthe form will render the frequency selection interface. If this array includes\nthe value of the `frequency` property, it will be pre-selected in the form.\n\n**Example:** `[\"7d\", \".5m\", \"1y\"]`",
          "default": "[]"
        },
        {
          "name": "items",
          "attribute": "items",
          "description": "Optional an array of ItemInterface objects with at least the following properties:\n- name: the name of the item\n- price: the price of each of this item\nThe following optional properties will be used:\n- quantity: (defaults to 1) how many of each item are added to the form\n- image: an image url to be displayed in the form for this item\n- items: an array of other items that are to be treated as bundled with this item\n- signatures: an object containing a key value list of previously generated HMAC validation codes\n\nOther item properties are accepted and sent to foxy cart\nSee [Products wiki for more details](https://wiki.foxycart.com/v/2.0/products#a_complete_list_of_product_parameters)",
          "type": "array"
        },
        {
          "name": "total",
          "description": "The total value of the items to be submitted.",
          "type": "number"
        },
        {
          "name": "signatures",
          "attribute": "signatures",
          "description": "Optional open: An Object with key, value pairs where the key is a item\nattribute and the value is a previously computed HMAC validation code.\n\n**Important security information:** this web component does not generate or validates the HMAC validation code.\nPlease, refer to [the Product Verification page](https://wiki.foxycart.com/v/2.0/hmac_validation) for more information and tools for generating the codes.",
          "type": "object"
        },
        {
          "name": "open",
          "attribute": "open",
          "description": "Optional open: An Object with key, value pairs where the key is a item\nattribute and the value is a boolean indicating that the property is editable by the user.\n\n**Advanced use only**: this web component does not provide means for the user to alter item attributes.\n\nSee [Product Verification](https://wiki.foxycart.com/v/2.0/hmac_validation) for more information.",
          "type": "object"
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Contains the language this component presents its translatable\ncontent in. Assigning a value to this property will load new\ntranslations in background and trigger a render afterwards.\n\n**Example:** `\"en\"`",
          "type": "string"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "description": "The namespace to look for the translations in. We use this property to\nsync namespace settings with the parent element and it's highly unlikely\nthat you'll ever need to set or read it in your code.\n\n**Example:** `\"admin\"`",
          "type": "string",
          "default": "\"defaultNS\""
        }
      ],
      "events": [
        {
          "name": "change",
          "description": "changed form data."
        },
        {
          "name": "submit",
          "description": "submitted form data"
        },
        {
          "name": "load",
          "description": "ProgressEvent instance with server response"
        }
      ],
      "slots": [
        {
          "name": "items",
          "description": "items to be added to the form."
        }
      ]
    },
    {
      "name": "foxy-item",
      "path": "./src/elements/public/ItemsForm/index.ts",
      "description": "This component allows a user to configure an item.\n\nThe item may be configured using HTML properties or a JS object.",
      "attributes": [
        {
          "name": "name",
          "description": "**Required** the name of the item.\n\n**Example:** `\"Dog food\"`",
          "type": "string"
        },
        {
          "name": "price",
          "description": "**Required** the price of a unit of this item\n\n**Example:** `10`",
          "type": "number"
        },
        {
          "name": "readonly",
          "description": "Makes quantity input readonly.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "image",
          "description": "Optional an image url to be displayed in the form.",
          "type": "string"
        },
        {
          "name": "alt",
          "description": "Optional the alt text for the image",
          "type": "string"
        },
        {
          "name": "url",
          "description": "Optional an image url to be displayed in the foxy cart once the custumer reaches the cart.",
          "type": "string"
        },
        {
          "name": "code",
          "description": "Optional item code. This property affects cart UI only.\nSee [Products](https://wiki.foxycart.com/v/2.0/products) wiki for more details.\n\n**Example:** `\"ISBN 978-0-12-345678-9\"`",
          "type": "string"
        },
        {
          "name": "parent_code",
          "description": "Optional parent code. This property affects cart UI only.\nIt causes Foxy Cart to recognize the parent-child relationship between two items.\n\nNested items set this property automatically.\n\n**Example:** `\"ISBN 978-0-12-345678-9\"`",
          "type": "string"
        },
        {
          "name": "quantity",
          "description": "**Required** The quantity of this item in the cart.",
          "type": "number",
          "default": "0"
        },
        {
          "name": "quantity_max",
          "description": "Optional quantity max. The maximum number of items of these to be added.",
          "type": "number"
        },
        {
          "name": "quantity_min",
          "description": "Optional quantity min. The minimum number of items of these to be added.",
          "type": "string"
        },
        {
          "name": "category",
          "description": "Optional category. Sets the category this item is in.\nSee [Products](https://wiki.foxycart.com/v/2.0/products) wiki for more details.\n\n**Example:** `\"heavy\"`",
          "type": "string"
        },
        {
          "name": "expires",
          "description": "Optional expires. Sets the expiration time of this item.\n\nAdvanced usage only: This property affects cart UI only.\nThis web component will not react to this property.\n\nThe item cannot be purchased after expiration, but if it is part of a\nsubscription, it remains in the subscription as long as it stands.\n\nSee [Products](https://wiki.foxycart.com/v/2.0/products) wiki for more details.\n\n**Example:** `15`",
          "type": "string"
        },
        {
          "name": "weight",
          "description": "Optional per item weight. This property affects cart UI only.",
          "type": "number"
        },
        {
          "name": "shipto",
          "description": "Optional. Specify a ship-to address for a specific item.\n\nAdvanced usage only: This property affects cart UI only.\nThis element does not provide any means for the user to specify this property.",
          "type": "string"
        },
        {
          "name": "length",
          "description": "Optional length.  This property affects cart UI only.",
          "type": "number"
        },
        {
          "name": "width",
          "description": "Optional width.  This property affects cart UI only.",
          "type": "number"
        },
        {
          "name": "height",
          "description": "Optional height.  This property affects cart UI only.",
          "type": "number"
        },
        {
          "name": "total",
          "description": "The total price of this item.\n\nIt takes into account child items and the quantity.",
          "type": "number",
          "default": "\"this.__computeTotalPrice()\""
        },
        {
          "name": "currency",
          "description": "3-letter lowercase currency code.\nIt is provided by the form if not set.\n\n**Example:** `\"usd\"`",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "pid",
          "description": "A unique id set to the item. Advanced usage only.",
          "type": "number",
          "default": "\"Item.__newId()\""
        },
        {
          "name": "items",
          "description": "Each child item is an object that can have any of the public properties of this element.\nChild elements will be created accordingly.",
          "type": "array"
        },
        {
          "name": "value",
          "type": "object"
        },
        {
          "name": "signatures",
          "description": "Optional open: An Object with key, value pairs where the key is a item\nattribute and the value is a previously computed HMAC validation code.\n\n**Important security information:** this web component does not generate or validates the HMAC validation code.\nPlease, refer to [the Product Verification page](https://wiki.foxycart.com/v/2.0/hmac_validation) for more information and tools for generating the codes.",
          "type": "object"
        },
        {
          "name": "open",
          "description": "Optional open: An Object with key, value pairs where the key is a item\nattribute and the value is a boolean indicating that the property is editable by the user.\n\n**Advanced use only**: this web component does not provide means for the user to alter item attributes.\n\nSee [Product Verification](https://wiki.foxycart.com/v/2.0/hmac_validation) for more information.",
          "type": "object"
        },
        {
          "name": "lang",
          "description": "Contains the language this component presents its translatable\ncontent in. Assigning a value to this property will load new\ntranslations in background and trigger a render afterwards.\n\n**Example:** `\"en\"`",
          "type": "string"
        },
        {
          "name": "ns",
          "description": "The namespace to look for the translations in. We use this property to\nsync namespace settings with the parent element and it's highly unlikely\nthat you'll ever need to set or read it in your code.\n\n**Example:** `\"admin\"`",
          "type": "string",
          "default": "\"defaultNS\""
        }
      ],
      "properties": [
        {
          "name": "rel",
          "type": "\"product_item\"",
          "default": "\"product_item\""
        },
        {
          "name": "name",
          "attribute": "name",
          "description": "**Required** the name of the item.\n\n**Example:** `\"Dog food\"`",
          "type": "string"
        },
        {
          "name": "price",
          "attribute": "price",
          "description": "**Required** the price of a unit of this item\n\n**Example:** `10`",
          "type": "number"
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "description": "Makes quantity input readonly.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "image",
          "attribute": "image",
          "description": "Optional an image url to be displayed in the form.",
          "type": "string"
        },
        {
          "name": "alt",
          "attribute": "alt",
          "description": "Optional the alt text for the image",
          "type": "string"
        },
        {
          "name": "url",
          "attribute": "url",
          "description": "Optional an image url to be displayed in the foxy cart once the custumer reaches the cart.",
          "type": "string"
        },
        {
          "name": "code",
          "attribute": "code",
          "description": "Optional item code. This property affects cart UI only.\nSee [Products](https://wiki.foxycart.com/v/2.0/products) wiki for more details.\n\n**Example:** `\"ISBN 978-0-12-345678-9\"`",
          "type": "string"
        },
        {
          "name": "parent_code",
          "attribute": "parent_code",
          "description": "Optional parent code. This property affects cart UI only.\nIt causes Foxy Cart to recognize the parent-child relationship between two items.\n\nNested items set this property automatically.\n\n**Example:** `\"ISBN 978-0-12-345678-9\"`",
          "type": "string"
        },
        {
          "name": "quantity",
          "attribute": "quantity",
          "description": "**Required** The quantity of this item in the cart.",
          "type": "number",
          "default": "0"
        },
        {
          "name": "quantity_max",
          "attribute": "quantity_max",
          "description": "Optional quantity max. The maximum number of items of these to be added.",
          "type": "number"
        },
        {
          "name": "quantity_min",
          "attribute": "quantity_min",
          "description": "Optional quantity min. The minimum number of items of these to be added.",
          "type": "string"
        },
        {
          "name": "category",
          "attribute": "category",
          "description": "Optional category. Sets the category this item is in.\nSee [Products](https://wiki.foxycart.com/v/2.0/products) wiki for more details.\n\n**Example:** `\"heavy\"`",
          "type": "string"
        },
        {
          "name": "expires",
          "attribute": "expires",
          "description": "Optional expires. Sets the expiration time of this item.\n\nAdvanced usage only: This property affects cart UI only.\nThis web component will not react to this property.\n\nThe item cannot be purchased after expiration, but if it is part of a\nsubscription, it remains in the subscription as long as it stands.\n\nSee [Products](https://wiki.foxycart.com/v/2.0/products) wiki for more details.\n\n**Example:** `15`",
          "type": "string"
        },
        {
          "name": "weight",
          "attribute": "weight",
          "description": "Optional per item weight. This property affects cart UI only.",
          "type": "number"
        },
        {
          "name": "shipto",
          "attribute": "shipto",
          "description": "Optional. Specify a ship-to address for a specific item.\n\nAdvanced usage only: This property affects cart UI only.\nThis element does not provide any means for the user to specify this property.",
          "type": "string"
        },
        {
          "name": "length",
          "attribute": "length",
          "description": "Optional length.  This property affects cart UI only.",
          "type": "number"
        },
        {
          "name": "width",
          "attribute": "width",
          "description": "Optional width.  This property affects cart UI only.",
          "type": "number"
        },
        {
          "name": "height",
          "attribute": "height",
          "description": "Optional height.  This property affects cart UI only.",
          "type": "number"
        },
        {
          "name": "total",
          "attribute": "total",
          "description": "The total price of this item.\n\nIt takes into account child items and the quantity.",
          "type": "number",
          "default": "\"this.__computeTotalPrice()\""
        },
        {
          "name": "currency",
          "attribute": "currency",
          "description": "3-letter lowercase currency code.\nIt is provided by the form if not set.\n\n**Example:** `\"usd\"`",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "pid",
          "attribute": "pid",
          "description": "A unique id set to the item. Advanced usage only.",
          "type": "number",
          "default": "\"Item.__newId()\""
        },
        {
          "name": "items",
          "attribute": "items",
          "description": "Each child item is an object that can have any of the public properties of this element.\nChild elements will be created accordingly.",
          "type": "array"
        },
        {
          "name": "value",
          "attribute": "value",
          "type": "object"
        },
        {
          "name": "signatures",
          "attribute": "signatures",
          "description": "Optional open: An Object with key, value pairs where the key is a item\nattribute and the value is a previously computed HMAC validation code.\n\n**Important security information:** this web component does not generate or validates the HMAC validation code.\nPlease, refer to [the Product Verification page](https://wiki.foxycart.com/v/2.0/hmac_validation) for more information and tools for generating the codes.",
          "type": "object"
        },
        {
          "name": "open",
          "attribute": "open",
          "description": "Optional open: An Object with key, value pairs where the key is a item\nattribute and the value is a boolean indicating that the property is editable by the user.\n\n**Advanced use only**: this web component does not provide means for the user to alter item attributes.\n\nSee [Product Verification](https://wiki.foxycart.com/v/2.0/hmac_validation) for more information.",
          "type": "object"
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Contains the language this component presents its translatable\ncontent in. Assigning a value to this property will load new\ntranslations in background and trigger a render afterwards.\n\n**Example:** `\"en\"`",
          "type": "string"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "description": "The namespace to look for the translations in. We use this property to\nsync namespace settings with the parent element and it's highly unlikely\nthat you'll ever need to set or read it in your code.\n\n**Example:** `\"admin\"`",
          "type": "string",
          "default": "\"defaultNS\""
        }
      ],
      "events": [
        {
          "name": "change"
        }
      ],
      "cssParts": [
        {
          "name": "picture",
          "description": "Image of the product in preview stack (for single products) or grid (for bundles)."
        },
        {
          "name": "item",
          "description": "The root element inside of the shadow dom."
        }
      ]
    },
    {
      "name": "foxy-nucleon",
      "path": "./src/elements/public/NucleonElement/index.ts",
      "description": "Base class for custom elements working with remote HAL+JSON resources.",
      "attributes": [
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-pagination",
      "path": "./src/elements/public/Pagination/index.ts",
      "description": "Helper element that adds pagination controls to elements\nrepresenting Hypermedia API collection pages. Works with NucleonElement instances only.\nPage element **MUST** be a direct descendant of `foxy-pagination`.",
      "attributes": [
        {
          "name": "first",
          "description": "URL of the first page of the colletion.",
          "type": "string"
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "first",
          "attribute": "first",
          "description": "URL of the first page of the colletion.",
          "type": "string"
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "lang",
          "attribute": "lang",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ]
    },
    {
      "name": "foxy-passkey-card",
      "path": "./src/elements/public/PasskeyCard/index.ts",
      "description": "Basic card displaying a saved passkey.",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "type": "Templates<TData>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "title:before"
        },
        {
          "name": "title:after"
        },
        {
          "name": "subtitle:before"
        },
        {
          "name": "subtitle:after"
        }
      ]
    },
    {
      "name": "foxy-passkey-form",
      "path": "./src/elements/public/PasskeyForm/index.ts",
      "description": "Form element for viewing and deleting passkeys (`fx:passkey`).",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "credential-id:before"
        },
        {
          "name": "credential-id:after"
        },
        {
          "name": "last-login-date:before"
        },
        {
          "name": "last-login-date:after"
        },
        {
          "name": "last-login-ua:before"
        },
        {
          "name": "last-login-ua:after"
        },
        {
          "name": "timestamps:before"
        },
        {
          "name": "timestamps:after"
        },
        {
          "name": "create:before"
        },
        {
          "name": "create:after"
        },
        {
          "name": "delete:before"
        },
        {
          "name": "delete:after"
        }
      ]
    },
    {
      "name": "foxy-payment-card",
      "path": "./src/elements/public/PaymentCard/index.ts",
      "description": "Basic card displaying a payment.\n\nNote: payment gateway names need to be loaded separately. You can obtain\nthem from `fx:property_helpers` using your own Backend API proxy or just hardcode the values\nyou need. Once you have the gateway names, call `I18n.setGateways(names)`.",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "title:before"
        },
        {
          "name": "title:after"
        },
        {
          "name": "subtitle:before"
        },
        {
          "name": "subtitle:after"
        },
        {
          "name": "card-info:before"
        },
        {
          "name": "card-info:after"
        },
        {
          "name": "fraud-risk:before"
        },
        {
          "name": "fraud-risk:after"
        },
        {
          "name": "processor-response:before"
        },
        {
          "name": "processor-response:after"
        }
      ]
    },
    {
      "name": "foxy-payment-method-card",
      "path": "./src/elements/public/PaymentMethodCard/index.ts",
      "description": "Basic card displaying a payment method.",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "actions:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "actions:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "actions:delete:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "actions:delete:after",
          "description": "**new in v1.4.0**"
        }
      ]
    },
    {
      "name": "foxy-payment-method-form",
      "path": "./src/elements/public/PaymentMethodForm/index.ts",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-payments-api",
      "path": "./src/elements/public/PaymentsApi/index.ts",
      "description": "Adapter element for Payments API. This element requires an additional hAPI adapter\nthat will handle authentication and session management.\n\n_Payments API is a client-side virtual API layer built on top of hAPI\nin an attempt to streamline access to stores' payment method settings\nthat is currently a bit quirky due to the legacy functionality. To use\nPayments API elements with hAPI, wrap them into this node._",
      "attributes": [
        {
          "name": "payment-method-set-hosted-payment-gateway-base-url",
          "description": "Base URL of the `fx:payment_method_set_hosted_payment_gateway` resource (without ID)."
        },
        {
          "name": "payment-method-set-hosted-payment-gateways-url",
          "description": "URL of the `fx:payment_method_set_hosted_payment_gateways` collection."
        },
        {
          "name": "hosted-payment-gateways-helper-url",
          "description": "URL of the `fx:hosted_payment_gateways` property helper."
        },
        {
          "name": "hosted-payment-gateway-base-url",
          "description": "Base URL of the `fx:hosted_payment_gateway` resource (without ID)."
        },
        {
          "name": "hosted-payment-gateways-url",
          "description": "URL of the `fx:hosted_payment_gateways` collection."
        },
        {
          "name": "payment-gateways-helper-url",
          "description": "URL of the `fx:payment_gateways` property helper."
        },
        {
          "name": "payment-method-set-base-url",
          "description": "Base URL of the `fx:payment_method_set` resource (without ID)."
        },
        {
          "name": "payment-method-sets-url",
          "description": "URL of the `fx:payment_method_sets` collection."
        },
        {
          "name": "fraud-protection-base-url",
          "description": "Base URL of the `fx:fraud_protection` resource (without ID)."
        },
        {
          "name": "fraud-protections-url",
          "description": "URL of the `fx:fraud_protections` collection."
        },
        {
          "name": "payment-gateway-base-url",
          "description": "Base URL of the `fx:payment_gateway` resource (without ID)."
        },
        {
          "name": "payment-gateways-url",
          "description": "URL of the `fx:payment_gateways` collection."
        }
      ],
      "properties": [
        {
          "name": "paymentMethodSetHostedPaymentGatewayBaseUrl",
          "attribute": "payment-method-set-hosted-payment-gateway-base-url",
          "description": "Base URL of the `fx:payment_method_set_hosted_payment_gateway` resource (without ID)."
        },
        {
          "name": "paymentMethodSetHostedPaymentGatewaysUrl",
          "attribute": "payment-method-set-hosted-payment-gateways-url",
          "description": "URL of the `fx:payment_method_set_hosted_payment_gateways` collection."
        },
        {
          "name": "hostedPaymentGatewaysHelperUrl",
          "attribute": "hosted-payment-gateways-helper-url",
          "description": "URL of the `fx:hosted_payment_gateways` property helper."
        },
        {
          "name": "hostedPaymentGatewayBaseUrl",
          "attribute": "hosted-payment-gateway-base-url",
          "description": "Base URL of the `fx:hosted_payment_gateway` resource (without ID)."
        },
        {
          "name": "hostedPaymentGatewaysUrl",
          "attribute": "hosted-payment-gateways-url",
          "description": "URL of the `fx:hosted_payment_gateways` collection."
        },
        {
          "name": "paymentGatewaysHelperUrl",
          "attribute": "payment-gateways-helper-url",
          "description": "URL of the `fx:payment_gateways` property helper."
        },
        {
          "name": "paymentMethodSetBaseUrl",
          "attribute": "payment-method-set-base-url",
          "description": "Base URL of the `fx:payment_method_set` resource (without ID)."
        },
        {
          "name": "paymentMethodSetsUrl",
          "attribute": "payment-method-sets-url",
          "description": "URL of the `fx:payment_method_sets` collection."
        },
        {
          "name": "fraudProtectionBaseUrl",
          "attribute": "fraud-protection-base-url",
          "description": "Base URL of the `fx:fraud_protection` resource (without ID)."
        },
        {
          "name": "fraudProtectionsUrl",
          "attribute": "fraud-protections-url",
          "description": "URL of the `fx:fraud_protections` collection."
        },
        {
          "name": "paymentGatewayBaseUrl",
          "attribute": "payment-gateway-base-url",
          "description": "Base URL of the `fx:payment_gateway` resource (without ID)."
        },
        {
          "name": "paymentGatewaysUrl",
          "attribute": "payment-gateways-url",
          "description": "URL of the `fx:payment_gateways` collection."
        }
      ]
    },
    {
      "name": "foxy-payments-api-fraud-protection-card",
      "path": "./src/elements/public/PaymentsApiFraudProtectionCard/index.ts",
      "description": "Card element representing a `fx:fraud_protection` resource of Payments API.\n\n_Payments API is a client-side virtual API layer built on top of hAPI\nin an attempt to streamline access to stores' payment method settings\nthat is currently a bit quirky due to the legacy functionality. To use\nthis element with hAPI, wrap it into a foxy-payments-api node._",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "getImageSrc",
          "description": "Fraud protection image/logo URL getter.\nIf left `null`, the card will display the default image."
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "type": "Templates<TData>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "title:before"
        },
        {
          "name": "title:after"
        },
        {
          "name": "subtitle:before"
        },
        {
          "name": "subtitle:after"
        }
      ]
    },
    {
      "name": "foxy-payments-api-fraud-protection-form",
      "path": "./src/elements/public/PaymentsApiFraudProtectionForm/index.ts",
      "description": "Form element for the `fx:fraud_protection` resource of Payments API.\n\n_Payments API is a client-side virtual API layer built on top of hAPI\nin an attempt to streamline access to stores' payment method settings\nthat is currently a bit quirky due to the legacy functionality. To use\nthis element with hAPI, wrap it into a foxy-payments-api node._",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "getImageSrc",
          "description": "A function that returns a URL of a fraud protection icon based on the given type."
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "description": "Template render functions mapped to their name.",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "description:before"
        },
        {
          "name": "description:after"
        },
        {
          "name": "score-threshold-reject:before"
        },
        {
          "name": "score-threshold-reject:after"
        },
        {
          "name": "json-[field-name-in-kebab-case]:before"
        },
        {
          "name": "json-[field-name-in-kebab-case]:after"
        },
        {
          "name": "timestamps:before"
        },
        {
          "name": "timestamps:after"
        },
        {
          "name": "create:before"
        },
        {
          "name": "create:after"
        },
        {
          "name": "delete:before"
        },
        {
          "name": "delete:after"
        }
      ]
    },
    {
      "name": "foxy-payments-api-payment-method-card",
      "path": "./src/elements/public/PaymentsApiPaymentMethodCard/index.ts",
      "description": "Card element representing a `fx:payment_method` resource of Payments API.\n\n_Payments API is a client-side virtual API layer built on top of hAPI\nin an attempt to streamline access to stores' payment method settings\nthat is currently a bit quirky due to the legacy functionality. To use\nthis element with hAPI, wrap it into a foxy-payments-api node._",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "getImageSrc",
          "description": "Payment method image/logo URL getter.\nIf left `null`, the card will display the default image."
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "type": "Templates<TData>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "title:before"
        },
        {
          "name": "title:after"
        },
        {
          "name": "subtitle:before"
        },
        {
          "name": "subtitle:after"
        }
      ]
    },
    {
      "name": "foxy-payments-api-payment-method-form",
      "path": "./src/elements/public/PaymentsApiPaymentMethodForm/index.ts",
      "description": "Form element for the `fx:payment_method` resource of Payments API.\n\n_Payments API is a client-side virtual API layer built on top of hAPI\nin an attempt to streamline access to stores' payment method settings\nthat is currently a bit quirky due to the legacy functionality. To use\nthis element with hAPI, wrap it into a foxy-payments-api node._",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "getImageSrc",
          "description": "A function that returns a URL of a payment method icon based on the given type."
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "description": "Template render functions mapped to their name.",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "description:before"
        },
        {
          "name": "description:after"
        },
        {
          "name": "account-id:before"
        },
        {
          "name": "account-id:after"
        },
        {
          "name": "account-key:before"
        },
        {
          "name": "account-key:after"
        },
        {
          "name": "third-party-key:before"
        },
        {
          "name": "third-party-key:after"
        },
        {
          "name": "test-account-id:before"
        },
        {
          "name": "test-account-id:after"
        },
        {
          "name": "test-account-key:before"
        },
        {
          "name": "test-account-key:after"
        },
        {
          "name": "test-third-party-key:before"
        },
        {
          "name": "test-third-party-key:after"
        },
        {
          "name": "additional-fields-[field-name-in-kebab-case]:before"
        },
        {
          "name": "additional-fields-[field-name-in-kebab-case]:after"
        },
        {
          "name": "three-d-secure-toggle:before"
        },
        {
          "name": "three-d-secure-toggle:after"
        },
        {
          "name": "three-d-secure-response:before"
        },
        {
          "name": "three-d-secure-response:after"
        },
        {
          "name": "timestamps:before"
        },
        {
          "name": "timestamps:after"
        },
        {
          "name": "create:before"
        },
        {
          "name": "create:after"
        },
        {
          "name": "delete:before"
        },
        {
          "name": "delete:after"
        }
      ]
    },
    {
      "name": "foxy-payments-api-payment-preset-card",
      "path": "./src/elements/public/PaymentsApiPaymentPresetCard/index.ts",
      "description": "Card element representing a `fx:payment_preset` resource of Payments API.\n\n_Payments API is a client-side virtual API layer built on top of hAPI\nin an attempt to streamline access to stores' payment method settings\nthat is currently a bit quirky due to the legacy functionality. To use\nthis element with hAPI, wrap it into a foxy-payments-api node._",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "type": "Templates<TData>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "title:before"
        },
        {
          "name": "title:after"
        },
        {
          "name": "subtitle:before"
        },
        {
          "name": "subtitle:after"
        }
      ]
    },
    {
      "name": "foxy-payments-api-payment-preset-form",
      "path": "./src/elements/public/PaymentsApiPaymentPresetForm/index.ts",
      "description": "Form element for the `fx:payment_preset` resource of Payments API.\n\n_Payments API is a client-side virtual API layer built on top of hAPI\nin an attempt to streamline access to stores' payment method settings\nthat is currently a bit quirky due to the legacy functionality. To use\nthis element with hAPI, wrap it into a foxy-payments-api node._",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "getFraudProtectionImageSrc",
          "description": "A function that returns image URL for given fraud protection `type`."
        },
        {
          "name": "getPaymentMethodImageSrc",
          "description": "A function that returns image URL for given payment method `type`."
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "description": "Template render functions mapped to their name.",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "description:before"
        },
        {
          "name": "description:after"
        },
        {
          "name": "is-live:before"
        },
        {
          "name": "is-live:after"
        },
        {
          "name": "is-purchase-order-enabled:before"
        },
        {
          "name": "is-purchase-order-enabled:after"
        },
        {
          "name": "payment-methods:before"
        },
        {
          "name": "payment-methods:after"
        },
        {
          "name": "fraud-protections:before"
        },
        {
          "name": "fraud-protections:after"
        },
        {
          "name": "timestamps:before"
        },
        {
          "name": "timestamps:after"
        },
        {
          "name": "create:before"
        },
        {
          "name": "create:after"
        },
        {
          "name": "delete:before"
        },
        {
          "name": "delete:after"
        }
      ]
    },
    {
      "name": "foxy-query-builder",
      "path": "./src/elements/public/QueryBuilder/index.ts",
      "description": "UI component for creating Foxy hAPI filters visually. Compatible with\nBackend API, Customer API or any other API using the same format as described\nin our [docs](https://api.foxy.io/docs/cheat-sheet).",
      "attributes": [
        {
          "name": "options",
          "description": "Autocomplete suggestions.",
          "type": "array"
        },
        {
          "name": "value",
          "description": "Current value as hAPI filter string.",
          "type": "string"
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ChangeEvent",
          "description": "QueryBuilder dispatches this event on itself when value changes.",
          "type": "typeof (Anonymous class)",
          "default": "\"class extends CustomEvent<void> {}\""
        },
        {
          "name": "Operator",
          "description": "Operator dictionary for use in autocomplete options.",
          "type": "typeof Operator",
          "default": "\"Operator\""
        },
        {
          "name": "Type",
          "description": "Field type dictionary for use in autocomplete options.",
          "type": "typeof Type",
          "default": "\"Type\""
        },
        {
          "name": "options",
          "attribute": "options",
          "description": "Autocomplete suggestions.",
          "type": "array"
        },
        {
          "name": "value",
          "attribute": "value",
          "description": "Current value as hAPI filter string.",
          "type": "string"
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "lang",
          "attribute": "lang",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ]
    },
    {
      "name": "foxy-report-form",
      "path": "./src/elements/public/ReportForm/index.ts",
      "description": "Form element for creating or editing reports (`fx:report`).",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "name:before"
        },
        {
          "name": "name:after"
        },
        {
          "name": "range:before"
        },
        {
          "name": "range:after"
        },
        {
          "name": "timestamps:before"
        },
        {
          "name": "timestamps:after"
        },
        {
          "name": "delete:before"
        },
        {
          "name": "delete:after"
        },
        {
          "name": "create:before"
        },
        {
          "name": "create:after"
        }
      ]
    },
    {
      "name": "foxy-reports-table",
      "path": "./src/elements/public/ReportsTable/index.ts",
      "description": "Configurable table element for 'fx:reports' collection.",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "nameColumn",
          "type": "Column<Resource<Reports, undefined>>",
          "default": "{}"
        },
        {
          "name": "startColumn",
          "type": "Column<Resource<Reports, undefined>>",
          "default": "{\"hideBelow\":\"md\"}"
        },
        {
          "name": "endColumn",
          "type": "Column<Resource<Reports, undefined>>",
          "default": "{\"hideBelow\":\"md\"}"
        },
        {
          "name": "createdOnColumn",
          "type": "Column<Resource<Reports, undefined>>",
          "default": "{}"
        },
        {
          "name": "linkColumn",
          "type": "Column<Resource<Reports, undefined>>",
          "default": "{}"
        },
        {
          "name": "columns",
          "description": "Array of column templates. See `Column` type for more details.",
          "type": "Column<Resource<Reports, undefined>>[]",
          "default": "[\"nameColumn\",\"startColumn\",\"endColumn\",\"createdOnColumn\",\"linkColumn\"]"
        },
        {
          "name": "templates",
          "type": "Templates<TData>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-shipment-card",
      "path": "./src/elements/public/ShipmentCard/index.ts",
      "description": "Basic card displaying a shipment.",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-shipping-method-card",
      "path": "./src/elements/public/ShippingMethodCard/index.ts",
      "description": "Card element representing a shipping method (`fx:shipping_method`).",
      "attributes": [
        {
          "name": "store-shipping-methods",
          "description": "URL of the `fx:store_shipping_methods` collection for a store.\nIf provided, the card will display Active status on active shipping methods."
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "storeShippingMethods",
          "attribute": "store-shipping-methods",
          "description": "URL of the `fx:store_shipping_methods` collection for a store.\nIf provided, the card will display Active status on active shipping methods."
        },
        {
          "name": "getImageSrc",
          "description": "Shipping method image/logo URL getter.\nIf left `null`, the card will display the default image."
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-sign-in-form",
      "path": "./src/elements/public/SignInForm/index.ts",
      "description": "Form element for email/password sign in.",
      "attributes": [
        {
          "name": "issuer",
          "type": "string",
          "default": "\"Unknown\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "issuer",
          "attribute": "issuer",
          "type": "string",
          "default": "\"Unknown\""
        },
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "email:before"
        },
        {
          "name": "email:after"
        },
        {
          "name": "password:before"
        },
        {
          "name": "password:after"
        },
        {
          "name": "new-password:before"
        },
        {
          "name": "new-password:after"
        },
        {
          "name": "mfa-secret-code:before"
        },
        {
          "name": "mfa-secret-code:after"
        },
        {
          "name": "mfa-totp-code:before"
        },
        {
          "name": "mfa-totp-code:after"
        },
        {
          "name": "mfa-remember-device:before"
        },
        {
          "name": "mfa-remember-device:after"
        },
        {
          "name": "error:before"
        },
        {
          "name": "error:after"
        },
        {
          "name": "submit:before"
        },
        {
          "name": "submit:after"
        }
      ]
    },
    {
      "name": "foxy-spinner",
      "path": "./src/elements/public/Spinner/index.ts",
      "attributes": [
        {
          "name": "layout",
          "description": "Optional spinner layout: horizonal (default) or vertical. First puts icon next\nto the label, second puts it above the text.",
          "type": "string",
          "default": "\"horizontal\""
        },
        {
          "name": "state",
          "description": "Optional spinner state:\n\n- `busy` (default) for loading data;\n- `error` for failures;\n- `empty` for when there's no data;\n- `paused` for a pause or a timeout before fetching the next chunk of data;\n- `end` for when there's no more data;",
          "type": "string",
          "default": "\"busy\""
        },
        {
          "name": "lang",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "layout",
          "attribute": "layout",
          "description": "Optional spinner layout: horizonal (default) or vertical. First puts icon next\nto the label, second puts it above the text.",
          "type": "string",
          "default": "\"horizontal\""
        },
        {
          "name": "state",
          "attribute": "state",
          "description": "Optional spinner state:\n\n- `busy` (default) for loading data;\n- `error` for failures;\n- `empty` for when there's no data;\n- `paused` for a pause or a timeout before fetching the next chunk of data;\n- `end` for when there's no more data;",
          "type": "string",
          "default": "\"busy\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ]
    },
    {
      "name": "foxy-store-card",
      "path": "./src/elements/public/StoreCard/index.ts",
      "description": "Card element representing a `fx:store` resource.",
      "attributes": [
        {
          "name": "default-domain",
          "description": "Default host domain for stores that don't use a custom domain name, e.g. `foxycart.com`."
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "defaultDomain",
          "attribute": "default-domain",
          "description": "Default host domain for stores that don't use a custom domain name, e.g. `foxycart.com`."
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "type": "Templates<TData>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "title:before"
        },
        {
          "name": "title:after"
        },
        {
          "name": "subtitle:before"
        },
        {
          "name": "subtitle:after"
        }
      ]
    },
    {
      "name": "foxy-store-form",
      "path": "./src/elements/public/StoreForm/index.ts",
      "description": "Form element for store settings (`fx:store`).",
      "attributes": [
        {
          "name": "customer-password-hash-types",
          "description": "URL of the `fx:customer_password_hash_types` property helper resource."
        },
        {
          "name": "shipping-address-types",
          "description": "URL of the `fx:shipping_address_types` property helper resource."
        },
        {
          "name": "store-versions",
          "description": "URL of the `fx:store_versions` property helper resource."
        },
        {
          "name": "checkout-types",
          "description": "URL of the `fx:checkout_types` property helper resource."
        },
        {
          "name": "locale-codes",
          "description": "URL of the `fx:locale_codes` property helper resource."
        },
        {
          "name": "languages",
          "description": "URL of the `fx:languages` property helper resource."
        },
        {
          "name": "timezones",
          "description": "URL of the `fx:timezones` property helper resource."
        },
        {
          "name": "countries",
          "description": "URL of the `fx:countries` property helper resource."
        },
        {
          "name": "regions",
          "description": "URL of the `fx:regions` property helper resource."
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "customerPasswordHashTypes",
          "attribute": "customer-password-hash-types",
          "description": "URL of the `fx:customer_password_hash_types` property helper resource."
        },
        {
          "name": "shippingAddressTypes",
          "attribute": "shipping-address-types",
          "description": "URL of the `fx:shipping_address_types` property helper resource."
        },
        {
          "name": "storeVersions",
          "attribute": "store-versions",
          "description": "URL of the `fx:store_versions` property helper resource."
        },
        {
          "name": "checkoutTypes",
          "attribute": "checkout-types",
          "description": "URL of the `fx:checkout_types` property helper resource."
        },
        {
          "name": "localeCodes",
          "attribute": "locale-codes",
          "description": "URL of the `fx:locale_codes` property helper resource."
        },
        {
          "name": "languages",
          "attribute": "languages",
          "description": "URL of the `fx:languages` property helper resource."
        },
        {
          "name": "timezones",
          "attribute": "timezones",
          "description": "URL of the `fx:timezones` property helper resource."
        },
        {
          "name": "countries",
          "attribute": "countries",
          "description": "URL of the `fx:countries` property helper resource."
        },
        {
          "name": "regions",
          "attribute": "regions",
          "description": "URL of the `fx:regions` property helper resource."
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "description": "Template render functions mapped to their name.",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "store-name:before"
        },
        {
          "name": "store-name:after"
        },
        {
          "name": "logo-url:before"
        },
        {
          "name": "logo-url:after"
        },
        {
          "name": "store-domain:before"
        },
        {
          "name": "store-domain:after"
        },
        {
          "name": "store-url:before"
        },
        {
          "name": "store-url:after"
        },
        {
          "name": "store-email:before"
        },
        {
          "name": "store-email:after"
        },
        {
          "name": "timezone:before"
        },
        {
          "name": "timezone:after"
        },
        {
          "name": "store-version-uri:before"
        },
        {
          "name": "store-version-uri:after"
        },
        {
          "name": "from-email:before"
        },
        {
          "name": "from-email:after"
        },
        {
          "name": "bcc-on-receipt-email:before"
        },
        {
          "name": "bcc-on-receipt-email:after"
        },
        {
          "name": "use-email-dns:before"
        },
        {
          "name": "use-email-dns:after"
        },
        {
          "name": "use-smtp-config:before"
        },
        {
          "name": "use-smtp-config:after"
        },
        {
          "name": "smtp-config:before"
        },
        {
          "name": "smtp-config:after"
        },
        {
          "name": "smtp-config-host:before"
        },
        {
          "name": "smtp-config-host:after"
        },
        {
          "name": "smtp-config-port:before"
        },
        {
          "name": "smtp-config-port:after"
        },
        {
          "name": "smtp-config-username:before"
        },
        {
          "name": "smtp-config-username:after"
        },
        {
          "name": "smtp-config-password:before"
        },
        {
          "name": "smtp-config-password:after"
        },
        {
          "name": "smtp-config-security:before"
        },
        {
          "name": "smtp-config-security:after"
        },
        {
          "name": "country:before"
        },
        {
          "name": "country:after"
        },
        {
          "name": "region:before"
        },
        {
          "name": "region:after"
        },
        {
          "name": "postal-code:before"
        },
        {
          "name": "postal-code:after"
        },
        {
          "name": "shipping-address-type:before"
        },
        {
          "name": "shipping-address-type:after"
        },
        {
          "name": "features-multiship:before"
        },
        {
          "name": "features-multiship:after"
        },
        {
          "name": "require-signed-shipping-rates:before"
        },
        {
          "name": "require-signed-shipping-rates:after"
        },
        {
          "name": "language:before"
        },
        {
          "name": "language:after"
        },
        {
          "name": "locale-code:before"
        },
        {
          "name": "locale-code:after"
        },
        {
          "name": "currency-style:before"
        },
        {
          "name": "currency-style:after"
        },
        {
          "name": "custom-display-id-config:before"
        },
        {
          "name": "custom-display-id-config:after"
        },
        {
          "name": "receipt-continue-url:before"
        },
        {
          "name": "receipt-continue-url:after"
        },
        {
          "name": "app-session-time:before"
        },
        {
          "name": "app-session-time:after"
        },
        {
          "name": "products-require-expires-property:before"
        },
        {
          "name": "products-require-expires-property:after"
        },
        {
          "name": "use-cart-validation:before"
        },
        {
          "name": "use-cart-validation:after"
        },
        {
          "name": "checkout-type:before"
        },
        {
          "name": "checkout-type:after"
        },
        {
          "name": "customer-password-hash-type:before"
        },
        {
          "name": "customer-password-hash-type:after"
        },
        {
          "name": "customer-password-hash-config:before"
        },
        {
          "name": "customer-password-hash-config:after"
        },
        {
          "name": "unified-order-entry-password:before"
        },
        {
          "name": "unified-order-entry-password:after"
        },
        {
          "name": "single-sign-on-url:before"
        },
        {
          "name": "single-sign-on-url:after"
        },
        {
          "name": "webhook-url:before"
        },
        {
          "name": "webhook-url:after"
        },
        {
          "name": "webhook-key-cart-signing:before"
        },
        {
          "name": "webhook-key-cart-signing:after"
        },
        {
          "name": "webhook-key-xml-datafeed:before"
        },
        {
          "name": "webhook-key-xml-datafeed:after"
        },
        {
          "name": "webhook-key-api-legacy:before"
        },
        {
          "name": "webhook-key-api-legacy:after"
        },
        {
          "name": "webhook-key-sso:before"
        },
        {
          "name": "webhook-key-sso:after"
        },
        {
          "name": "is-maintenance-mode:before"
        },
        {
          "name": "is-maintenance-mode:after"
        },
        {
          "name": "timestamps:before"
        },
        {
          "name": "timestamps:after"
        },
        {
          "name": "create:before"
        },
        {
          "name": "create:after"
        },
        {
          "name": "delete:before"
        },
        {
          "name": "delete:after"
        }
      ]
    },
    {
      "name": "foxy-store-shipping-method-form",
      "path": "./src/elements/public/StoreShippingMethodForm/index.ts",
      "description": "Form element for creating and editing store shipping methods (`fx:store_shipping_method`).",
      "attributes": [
        {
          "name": "shipping-methods",
          "description": "URL of the `fx:shipping_methods` property helper."
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "shippingMethods",
          "attribute": "shipping-methods",
          "description": "URL of the `fx:shipping_methods` property helper."
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "description": "Template render functions mapped to their name.",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "shipping-method-uri:before"
        },
        {
          "name": "shipping-method-uri:after"
        },
        {
          "name": "shipping-container-uri:before"
        },
        {
          "name": "shipping-container-uri:after"
        },
        {
          "name": "shipping-drop-type-uri:before"
        },
        {
          "name": "shipping-drop-type-uri:after"
        },
        {
          "name": "destinations:before"
        },
        {
          "name": "destinations:after"
        },
        {
          "name": "authentication-key:before"
        },
        {
          "name": "authentication-key:after"
        },
        {
          "name": "meter-number:before"
        },
        {
          "name": "meter-number:after"
        },
        {
          "name": "endpoint:before"
        },
        {
          "name": "endpoint:after"
        },
        {
          "name": "accountid:before"
        },
        {
          "name": "accountid:after"
        },
        {
          "name": "password:before"
        },
        {
          "name": "password:after"
        },
        {
          "name": "custom-code:before"
        },
        {
          "name": "custom-code:after"
        },
        {
          "name": "services:before"
        },
        {
          "name": "services:after"
        },
        {
          "name": "timestamps:before"
        },
        {
          "name": "timestamps:after"
        },
        {
          "name": "create:before"
        },
        {
          "name": "create:after"
        },
        {
          "name": "delete:before"
        },
        {
          "name": "delete:after"
        }
      ]
    },
    {
      "name": "foxy-subscription-card",
      "path": "./src/elements/public/SubscriptionCard/index.ts",
      "description": "Card element displaying subscription summary.",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-subscription-form",
      "path": "./src/elements/public/SubscriptionForm/index.ts",
      "description": "Form element for creating or editing subscriptions.",
      "attributes": [
        {
          "name": "customer-addresses"
        },
        {
          "name": "item-categories"
        },
        {
          "name": "locale-codes"
        },
        {
          "name": "settings",
          "type": "object"
        },
        {
          "name": "coupons"
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "getTransactionPageHref",
          "default": "\"(_, data: any) => {\\n    return data?._links['fx:receipt'].href;\\n  }\""
        },
        {
          "name": "getCustomerPageHref"
        },
        {
          "name": "customerAddresses",
          "attribute": "customer-addresses"
        },
        {
          "name": "itemCategories",
          "attribute": "item-categories"
        },
        {
          "name": "localeCodes",
          "attribute": "locale-codes"
        },
        {
          "name": "settings",
          "attribute": "settings",
          "type": "object"
        },
        {
          "name": "coupons",
          "attribute": "coupons"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "header:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "header:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "items:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "items:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "items:actions:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "items:actions:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "end-date:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "end-date:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "next-transaction-date:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "next-transaction-date:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "frequency:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "frequency:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "transactions:before",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "transactions:after",
          "description": "**new in v1.4.0**"
        },
        {
          "name": "attributes:before",
          "description": "**new in v1.20.0**"
        },
        {
          "name": "attributes:after",
          "description": "**new in v1.20.0**"
        },
        {
          "name": "timestamps:before",
          "description": "**new in v1.20.0**"
        },
        {
          "name": "timestamps:after",
          "description": "**new in v1.20.0**"
        },
        {
          "name": "past-due-amount:before",
          "description": "**new in v1.20.0**"
        },
        {
          "name": "past-due-amount:after",
          "description": "**new in v1.20.0**"
        },
        {
          "name": "start-date:before",
          "description": "**new in v1.20.0**"
        },
        {
          "name": "start-date:after",
          "description": "**new in v1.20.0**"
        }
      ]
    },
    {
      "name": "foxy-subscription-settings-form",
      "path": "./src/elements/public/SubscriptionSettingsForm/index.ts",
      "description": "Form element for managing `fx:subscription_settings` resources.",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "past-due-amount-handling:before"
        },
        {
          "name": "past-due-amount-handling:after"
        },
        {
          "name": "automatically-charge-past-due-amount:before"
        },
        {
          "name": "automatically-charge-past-due-amount:after"
        },
        {
          "name": "clear-past-due-amounts-on",
          "description": "success:before – only if `form.automatically_charge_past_due_amount` is `false`"
        },
        {
          "name": "reset-nextdate-on-makeup",
          "description": "payment:before – only if `form.automatically_charge_past_due_amount` is `false`"
        },
        {
          "name": "reattempt-bypass:before"
        },
        {
          "name": "reattempt-bypass:after"
        },
        {
          "name": "reattempt-schedule:before"
        },
        {
          "name": "reattempt-schedule:after"
        },
        {
          "name": "reminder-email-schedule:before"
        },
        {
          "name": "reminder-email-schedule:after"
        },
        {
          "name": "expiring-soon-payment-reminder-schedule:before"
        },
        {
          "name": "expiring-soon-payment-reminder-schedule:after"
        },
        {
          "name": "send-email-receipts-for-automated-billing:before"
        },
        {
          "name": "send-email-receipts-for-automated-billing:after"
        },
        {
          "name": "cancellation-schedule:before"
        },
        {
          "name": "cancellation-schedule:after"
        },
        {
          "name": "modification-url:before"
        },
        {
          "name": "modification-url:after"
        },
        {
          "name": "timestamps:before"
        },
        {
          "name": "timestamps:after"
        },
        {
          "name": "create:before"
        },
        {
          "name": "create:after"
        },
        {
          "name": "delete:before"
        },
        {
          "name": "delete:after"
        }
      ]
    },
    {
      "name": "foxy-subscriptions-table",
      "path": "./src/elements/public/SubscriptionsTable/index.ts",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "priceColumn",
          "type": "Column<Resource<Subscriptions, { zoom: { transaction_template: \"items\"; }; }>>",
          "default": "{}"
        },
        {
          "name": "summaryColumn",
          "type": "Column<Resource<Subscriptions, { zoom: { transaction_template: \"items\"; }; }>>",
          "default": "{}"
        },
        {
          "name": "statusColumn",
          "type": "Column<Resource<Subscriptions, { zoom: { transaction_template: \"items\"; }; }>>",
          "default": "{\"hideBelow\":\"sm\"}"
        },
        {
          "name": "subTokenURLColumn",
          "type": "Column<Resource<Subscriptions, { zoom: { transaction_template: \"items\"; }; }>>",
          "default": "{}"
        },
        {
          "name": "columns",
          "description": "Array of column templates. See `Column` type for more details.",
          "type": "Column<Resource<Subscriptions, { zoom: { transaction_template: \"items\"; }; }>>[]",
          "default": "[\"priceColumn\",\"summaryColumn\",\"statusColumn\",\"subTokenURLColumn\"]"
        },
        {
          "name": "templates",
          "type": "Templates<TData>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-swipe-actions",
      "path": "./src/elements/public/SwipeActions/index.ts",
      "description": "A utility element for adding swipe actions to cards or list items. Usage:\n\n```html\n<foxy-swipe-actions>\n   <foxy-customer-card></foxy-customer-card>\n   <button slot=\"action\">Edit</button>\n   <button slot=\"action\">Delete</button>\n</foxy-swipe-actions>\n```"
    },
    {
      "name": "foxy-table",
      "path": "./src/elements/public/Table/index.ts",
      "description": "Configurable table element for HAL+JSON collections.",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "columns",
          "description": "Array of column templates. See `Column` type for more details.",
          "default": "[]"
        },
        {
          "name": "templates",
          "type": "Templates<TData>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-tax-card",
      "path": "./src/elements/public/TaxCard/index.ts",
      "description": "Basic card displaying a tax.",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "title:before"
        },
        {
          "name": "title:after"
        },
        {
          "name": "subtitle:before"
        },
        {
          "name": "subtitle:after"
        }
      ]
    },
    {
      "name": "foxy-tax-form",
      "path": "./src/elements/public/TaxForm/index.ts",
      "description": "Form element for creating or editing taxes (`fx:tax`).",
      "attributes": [
        {
          "name": "countries",
          "description": "URI of the `fx:countries` hAPI resource.",
          "type": "string"
        },
        {
          "name": "regions",
          "description": "URI of the `fx:regions` hAPI resource.",
          "type": "string"
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "countries",
          "attribute": "countries",
          "description": "URI of the `fx:countries` hAPI resource.",
          "type": "string"
        },
        {
          "name": "regions",
          "attribute": "regions",
          "description": "URI of the `fx:regions` hAPI resource.",
          "type": "string"
        },
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "name:before"
        },
        {
          "name": "name:after"
        },
        {
          "name": "type:before"
        },
        {
          "name": "type:after"
        },
        {
          "name": "country:before"
        },
        {
          "name": "country:after"
        },
        {
          "name": "region:before"
        },
        {
          "name": "region:after"
        },
        {
          "name": "city:before"
        },
        {
          "name": "city:after"
        },
        {
          "name": "provider:before"
        },
        {
          "name": "provider:after"
        },
        {
          "name": "rate:before"
        },
        {
          "name": "rate:after"
        },
        {
          "name": "apply-to-shipping:before"
        },
        {
          "name": "apply-to-shipping:after"
        },
        {
          "name": "use-origin-rates:before"
        },
        {
          "name": "use-origin-rates:after"
        },
        {
          "name": "exempt-all-customer-tax-ids:before"
        },
        {
          "name": "exempt-all-customer-tax-ids:after"
        },
        {
          "name": "timestamps:before"
        },
        {
          "name": "timestamps:after"
        },
        {
          "name": "delete:before"
        },
        {
          "name": "delete:after"
        },
        {
          "name": "create:before"
        },
        {
          "name": "create:after"
        }
      ]
    },
    {
      "name": "foxy-template-config-form",
      "path": "./src/elements/public/TemplateConfigForm/index.ts",
      "description": "Form element for creating or editing template configs (`fx:template_config`).",
      "attributes": [
        {
          "name": "countries",
          "description": "URI of the `fx:countries` hAPI resource.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "regions",
          "description": "URI of the `fx:regions` hAPI resource.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "countries",
          "attribute": "countries",
          "description": "URI of the `fx:countries` hAPI resource.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "regions",
          "attribute": "regions",
          "description": "URI of the `fx:regions` hAPI resource.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "cart-type:before"
        },
        {
          "name": "cart-type:after"
        },
        {
          "name": "foxycomplete:before"
        },
        {
          "name": "foxycomplete:after"
        },
        {
          "name": "locations:before"
        },
        {
          "name": "locations:after"
        },
        {
          "name": "hidden-fields:before"
        },
        {
          "name": "hidden-fields:after"
        },
        {
          "name": "cards:before"
        },
        {
          "name": "cards:after"
        },
        {
          "name": "checkout-type:before"
        },
        {
          "name": "checkout-type:after"
        },
        {
          "name": "consent:before"
        },
        {
          "name": "consent:after"
        },
        {
          "name": "fields:before"
        },
        {
          "name": "fields:after"
        },
        {
          "name": "google-analytics:before"
        },
        {
          "name": "google-analytics:after"
        },
        {
          "name": "troubleshooting:before"
        },
        {
          "name": "troubleshooting:after"
        },
        {
          "name": "custom-config:before"
        },
        {
          "name": "custom-config:after"
        },
        {
          "name": "header:before"
        },
        {
          "name": "header:after"
        },
        {
          "name": "custom-fields:before"
        },
        {
          "name": "custom-fields:after"
        },
        {
          "name": "footer:before"
        },
        {
          "name": "footer:after"
        }
      ]
    },
    {
      "name": "foxy-template-form",
      "path": "./src/elements/public/TemplateForm/index.ts",
      "description": "Form element for creating or editing templates (`fx:cart_include_template`, `fx:checkout_template`, `fx:cart_template`).",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "description:before"
        },
        {
          "name": "description:after"
        },
        {
          "name": "content:before"
        },
        {
          "name": "content:after"
        },
        {
          "name": "timestamps:before"
        },
        {
          "name": "timestamps:after"
        },
        {
          "name": "create:before"
        },
        {
          "name": "create:after"
        },
        {
          "name": "delete:before"
        },
        {
          "name": "delete:after"
        }
      ]
    },
    {
      "name": "foxy-template-set-card",
      "path": "./src/elements/public/TemplateSetCard/index.ts",
      "description": "Card element representing a template set (`fx:template_set`).",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "type": "Templates<TData>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "title:before"
        },
        {
          "name": "title:after"
        },
        {
          "name": "subtitle:before"
        },
        {
          "name": "subtitle:after"
        }
      ]
    },
    {
      "name": "foxy-template-set-form",
      "path": "./src/elements/public/TemplateSetForm/index.ts",
      "description": "Form element for creating and editing template sets (`fx:template_set`).",
      "attributes": [
        {
          "name": "payment-method-sets",
          "description": "URL of the store's `fx:payment_method_sets` collection (used to fill the relevant dropdown with options)."
        },
        {
          "name": "language-strings",
          "description": "URL of the `fx:language_strings` property helper (passed through to foxy-i18n-editor)."
        },
        {
          "name": "locale-codes",
          "description": "URL of the `fx:locale_codes` property helper (used to fill the relevant dropdown with options)."
        },
        {
          "name": "languages",
          "description": "URL of the `fx:languages` property helper (used to fill the relevant dropdown with options)."
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "paymentMethodSets",
          "attribute": "payment-method-sets",
          "description": "URL of the store's `fx:payment_method_sets` collection (used to fill the relevant dropdown with options)."
        },
        {
          "name": "languageStrings",
          "attribute": "language-strings",
          "description": "URL of the `fx:language_strings` property helper (passed through to foxy-i18n-editor)."
        },
        {
          "name": "localeCodes",
          "attribute": "locale-codes",
          "description": "URL of the `fx:locale_codes` property helper (used to fill the relevant dropdown with options)."
        },
        {
          "name": "languages",
          "attribute": "languages",
          "description": "URL of the `fx:languages` property helper (used to fill the relevant dropdown with options)."
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "description": "Template render functions mapped to their name.",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "description:before"
        },
        {
          "name": "description:after"
        },
        {
          "name": "code:before"
        },
        {
          "name": "code:after"
        },
        {
          "name": "language:before"
        },
        {
          "name": "language:after"
        },
        {
          "name": "locale-code:before"
        },
        {
          "name": "locale-code:after"
        },
        {
          "name": "payment-method-set-uri:before"
        },
        {
          "name": "payment-method-set-uri:after"
        },
        {
          "name": "language-overrides:before"
        },
        {
          "name": "language-overrides:after"
        },
        {
          "name": "timestamps:before"
        },
        {
          "name": "timestamps:after"
        },
        {
          "name": "create:before"
        },
        {
          "name": "create:after"
        },
        {
          "name": "delete:before"
        },
        {
          "name": "delete:after"
        }
      ]
    },
    {
      "name": "foxy-transaction",
      "path": "./src/elements/public/Transaction/index.ts",
      "description": "Transaction summary page (`fx:transaction`).",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-transaction-card",
      "path": "./src/elements/public/TransactionCard/index.ts",
      "description": "Basic card displaying a transaction.",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "templates",
          "type": "Partial<{ 'total:before': Renderer<TransactionCard>; 'total:after': Renderer<TransactionCard>; 'status:before': Renderer<TransactionCard>; ... 4 more ...; 'customer:after': Renderer<...>; }>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "total:before"
        },
        {
          "name": "total:after"
        },
        {
          "name": "status:before"
        },
        {
          "name": "status:after"
        },
        {
          "name": "description:before"
        },
        {
          "name": "description:after"
        },
        {
          "name": "customer:before"
        },
        {
          "name": "customer:after"
        }
      ]
    },
    {
      "name": "foxy-transactions-table",
      "path": "./src/elements/public/TransactionsTable/index.ts",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "priceColumn",
          "type": "Column<Resource<Transactions, { zoom: \"items\"; }>>",
          "default": "{}"
        },
        {
          "name": "summaryColumn",
          "type": "Column<Resource<Transactions, { zoom: \"items\"; }>>",
          "default": "{}"
        },
        {
          "name": "statusColumn",
          "type": "Column<Resource<Transactions, { zoom: \"items\"; }>>",
          "default": "{\"hideBelow\":\"sm\"}"
        },
        {
          "name": "idColumn",
          "type": "Column<Resource<Transactions, { zoom: \"items\"; }>>",
          "default": "{\"hideBelow\":\"sm\"}"
        },
        {
          "name": "dateColumn",
          "type": "Column<Resource<Transactions, { zoom: \"items\"; }>>",
          "default": "{\"hideBelow\":\"sm\"}"
        },
        {
          "name": "receiptColumn",
          "type": "Column<Resource<Transactions, { zoom: \"items\"; }>>",
          "default": "{}"
        },
        {
          "name": "columns",
          "description": "Array of column templates. See `Column` type for more details.",
          "type": "Column<Resource<Transactions, { zoom: \"items\"; }>>[]",
          "default": "[\"priceColumn\",\"summaryColumn\",\"statusColumn\",\"idColumn\",\"dateColumn\",\"receiptColumn\"]"
        },
        {
          "name": "templates",
          "type": "Templates<TData>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-user-card",
      "path": "./src/elements/public/UserCard/index.ts",
      "description": "Card element representing a `fx:user` resource.",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "type": "Templates<TData>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "title:before"
        },
        {
          "name": "title:after"
        },
        {
          "name": "subtitle:before"
        },
        {
          "name": "subtitle:after"
        }
      ]
    },
    {
      "name": "foxy-user-form",
      "path": "./src/elements/public/UserForm/index.ts",
      "description": "Form element for `fx:user` resources.",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "type": "Templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "first",
          "description": "name:before – new in v1.22.0"
        },
        {
          "name": "last",
          "description": "name:before – new in v1.22.0"
        },
        {
          "name": "",
          "description": "email:before – new in v1.22.0"
        }
      ]
    },
    {
      "name": "foxy-users-table",
      "path": "./src/elements/public/UsersTable/index.ts",
      "attributes": [
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "nameColumn",
          "type": "Column<Resource<Users, undefined>>",
          "default": "{}"
        },
        {
          "name": "emailColumn",
          "type": "Column<Resource<Users, undefined>>",
          "default": "{\"hideBelow\":\"md\"}"
        },
        {
          "name": "rolesColumn",
          "type": "Column<Resource<Users, undefined>>",
          "default": "{}"
        },
        {
          "name": "lastUpdatedColumn",
          "type": "Column<Resource<Users, undefined>>",
          "default": "{\"hideBelow\":\"lg\"}"
        },
        {
          "name": "actionsColumn",
          "type": "Column<Resource<Users, undefined>>",
          "default": "{}"
        },
        {
          "name": "columns",
          "description": "Array of column templates. See `Column` type for more details.",
          "type": "Column<Resource<Users, undefined>>[]",
          "default": "[\"nameColumn\",\"emailColumn\",\"rolesColumn\",\"lastUpdatedColumn\",\"actionsColumn\"]"
        },
        {
          "name": "templates",
          "type": "Templates<TData>",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-webhook-card",
      "path": "./src/elements/public/WebhookCard/index.ts",
      "description": "Basic card displaying webhook (`fx:webhook`) info.",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-webhook-form",
      "path": "./src/elements/public/WebhookForm/index.ts",
      "description": "Form element for creating or editing webhooks (`fx:webhook`).",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "templates",
          "default": "{}"
        },
        {
          "name": "mode",
          "attribute": "mode",
          "type": "string",
          "default": "\"production\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "readonlyControls",
          "attribute": "readonlycontrols",
          "default": "\"False\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabledControls",
          "attribute": "disabledcontrols",
          "default": "\"False\""
        },
        {
          "name": "hidden",
          "attribute": "hidden",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hiddenControls",
          "attribute": "hiddencontrols",
          "default": "\"False\""
        },
        {
          "name": "readonlySelector",
          "type": "BooleanSelector"
        },
        {
          "name": "disabledSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "hiddenSelector",
          "type": "BooleanSelector"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ],
      "slots": [
        {
          "name": "name:before"
        },
        {
          "name": "name:after"
        },
        {
          "name": "event-resource:before"
        },
        {
          "name": "event-resource:after"
        },
        {
          "name": "query:before"
        },
        {
          "name": "query:after"
        },
        {
          "name": "url:before"
        },
        {
          "name": "url:after"
        },
        {
          "name": "format:before"
        },
        {
          "name": "format:after"
        },
        {
          "name": "encryption-key:before"
        },
        {
          "name": "encryption-key:after"
        },
        {
          "name": "version:before"
        },
        {
          "name": "version:after"
        },
        {
          "name": "statuses:before"
        },
        {
          "name": "statuses:after"
        },
        {
          "name": "logs:before"
        },
        {
          "name": "logs:after"
        }
      ]
    },
    {
      "name": "foxy-webhook-log-card",
      "path": "./src/elements/public/WebhookLogCard/index.ts",
      "description": "Basic card displaying webhook log (`fx:webhook_log`) info.",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    },
    {
      "name": "foxy-webhook-status-card",
      "path": "./src/elements/public/WebhookStatusCard/index.ts",
      "description": "Basic card displaying webhook status (`fx:webhook_status`) info.",
      "attributes": [
        {
          "name": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ns",
          "attribute": "ns",
          "type": "string",
          "default": "\"defaultNS\""
        },
        {
          "name": "t",
          "type": "Translator",
          "default": "\"(key, options) => {\\n      const I18nElement = customElements.get('foxy-i18n') as typeof I18n | undefined;\\n\\n      if (!I18nElement) return key;\\n\\n      const keys = [\\n        ...this.ns\\n          .split(' ')\\n          .reverse()\\n          .map(v => v.trim())\\n          .filter(v => v.length > 0)\\n          .reverse()\\n          .map((v, i, a) => `${v}:${[...a.slice(i + 1), key].join('.')}`),\\n        `shared:${key}`,\\n      ];\\n\\n      return I18nElement.i18next.t(keys, { lng: this.lang, ...options }).toString();\\n    }\""
        },
        {
          "name": "isBodyReady",
          "type": "boolean"
        },
        {
          "name": "UpdateEvent",
          "description": "Instances of this event are dispatched on an element whenever it changes its\nstate (e.g. when going from `busy` to `idle` or on `form` data change).\nThis event isn't cancelable, and it does not bubble.",
          "type": "typeof UpdateEvent",
          "default": "\"UpdateEvent\""
        },
        {
          "name": "Rumour",
          "description": "Creates a tagged [Rumour](https://sdk.foxy.dev/classes/_core_index_.rumour.html)\ninstance if it doesn't exist or returns cached one otherwise. NucleonElements\nuse empty Rumour group by default.",
          "type": "((group: string) => Rumour) & MemoizedFunction",
          "default": "\"memoize<(group: string) => Rumour>(() => new Rumour())\""
        },
        {
          "name": "API",
          "description": "Universal [API](https://sdk.foxy.dev/classes/_core_index_.api.html) client\nthat dispatches cancellable `FetchEvent` on an element before each request.",
          "type": "typeof API",
          "default": "\"API\""
        },
        {
          "name": "lang",
          "attribute": "lang",
          "description": "Optional ISO 639-1 code describing the language element content is written in.\nChanging the `lang` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "parent",
          "attribute": "parent",
          "description": "Optional URL of the collection this element's resource belongs to.\nChanging the `parent` attribute will update the value of this property.",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "related",
          "attribute": "related",
          "description": "Optional URI list of the related resources. If Rumour encounters a related\nresource on creation or deletion, it will be reloaded from source.",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "failure",
          "description": "If network request returns non-2XX code, the entire error response\nwill be available via this getter.\n\nThis property is readonly. Changing failure records via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override error status.",
          "type": "Response | null"
        },
        {
          "name": "errors",
          "description": "Array of validation errors returned from `NucleonElement.v8n` checks.\n\nThis property is readonly. Adding or removing error codes via this property is\nnot guaranteed to work. NucleonElement does not provide a way to override validity status.",
          "type": "string[]"
        },
        {
          "name": "form",
          "description": "Resource snapshot with edits applied. Empty object if unavailable.\n\nThis property and its value are readonly. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please use `element.edit({ foo: 'bar' })` instead.\nIf you need to replace the entire data object, consider using `element.data`.",
          "type": "Partial<TData>"
        },
        {
          "name": "data",
          "description": "Resource snapshot as-is, no edits applied. Null if unavailable.\n\nReturned value is not reactive. Assignments like `element.data.foo = 'bar'`\nare not guaranteed to work. Please set the property instead: `element.data = { ...element.data, foo: 'bar' }`.\nIf you're processing user input, consider using `element.form` and `element.edit()` instead.",
          "type": "TData | null"
        },
        {
          "name": "group",
          "attribute": "group",
          "description": "Rumour group. Elements in different groups will not share updates. Empty by default.",
          "type": "string"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Optional URL of the resource to load. Switches element to `idle.template` state if empty (default).",
          "type": "string"
        },
        {
          "name": "infer",
          "attribute": "infer",
          "description": "Set a name for this element here to enable property inference. Set to `null` to disable.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "update",
          "description": "Instance of `NucleonElement.UpdateEvent`. Dispatched on an element whenever it changes its state."
        },
        {
          "name": "fetch",
          "description": "Instance of `NucleonElement.API.FetchEvent`. Emitted before each API request."
        }
      ]
    }
  ]
}