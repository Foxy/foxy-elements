import { ScopedElementsMixin } from '@open-wc/scoped-elements';
import { LitElement, CSSResult, CSSResultArray, unsafeCSS, css } from 'lit-element';

/**
 * One of the base classes for each rel-specific element in the collection
 * providing shared TailwindCSS styles for Shadow DOM content.
 * This class MUST NOT be used on its own (hence the `abstract` keyword) or
 * referenced externally (outside of the package).
 */
export abstract class Themeable extends ScopedElementsMixin(LitElement) {
  /**
   * Shared TailwindCSS stylesheet generated by the bundler, dev server or
   * any other project building setup included with this package. The content in the
   * template literal below will be replaced with the relevant styles during build â€“ DO NOT change this.
   * Using `unsafeCSS` to skip additional sanitization since it's our own code anyway.
   * @readonly
   */
  public static get styles(): CSSResult | CSSResultArray {
    return [
      unsafeCSS`{{ output }}`,
      css`
        :host {
          display: block;
        }
      `,
    ];
  }

  private static readonly __breakpoints = Object.entries({ sm: 640, md: 768, lg: 1024, xl: 1280 });

  private static readonly __resizeObserverCallback: ResizeObserverCallback = entries => {
    entries.forEach(({ contentRect, target }) => {
      const oldValue = target.getAttribute('breakpoint');
      const newValue = Themeable.__breakpoints
        .filter(([, minWidth]) => contentRect.width >= minWidth)
        .map(([breakpoint]) => breakpoint)
        .join(' ');

      if (oldValue !== newValue) target.setAttribute('breakpoint', newValue);
    });
  };

  constructor() {
    super();
    new ResizeObserver(Themeable.__resizeObserverCallback).observe(this);
  }
}
